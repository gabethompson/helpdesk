/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.helpdesk;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import java.awt.*;

/**
 *
 * @author Gabriel
 */

class GradientPanel extends JPanel {
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        Color color1 = getBackground();
        Color color2 = color1.darker();
        int w = getWidth();
        int h = getHeight();
        GradientPaint gp = new GradientPaint(0, 0, color1, 0, h, color2);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, w, h);
    }
}

public class HelpDeskUI extends javax.swing.JFrame
{   
    Connection con;
    Statement statement;
    PreparedStatement preparedStatement;
    ResultSet resultSet;
    int id = -1;
    int tickid = -1;
    DefaultListModel genlist;
    DefaultListModel claimlist;
    
    
    /**
     * Creates new form HelpDeskUI
     */
    public HelpDeskUI()
    {
        initComponents();
        /*Netbeans won't let me create tabs without instantiating them on program run.
            Therefore, I need to remove all of the tabs except for the Login one after
            initComponents() but still within the constructor.*/
        int totalTabs = TopPane.getTabCount();
        for (int i = 1; i < totalTabs; i++) {
            TopPane.removeTabAt(1);
        }
        
        managerLogsTable.setFillsViewportHeight(true);
        cron();
        
        //Set coloured rendering for the ticket lists.
        PriorityRenderer priorityRenderer = new PriorityRenderer();
        ClientList.setCellRenderer(priorityRenderer);
        AgentClaimList.setCellRenderer(priorityRenderer);
        AgentGenList.setCellRenderer(priorityRenderer);
        ManagerClaimList.setCellRenderer(priorityRenderer);
        ManagerGenList.setCellRenderer(priorityRenderer);
        managerViewAllList.setCellRenderer(priorityRenderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        TopPane = new javax.swing.JTabbedPane();
        LoginPanel = new GradientPanel();
        ExitButton = new javax.swing.JButton();
        UsernameTextField = new javax.swing.JTextField();
        UsernameLabel = new javax.swing.JLabel();
        PasswordLabel = new javax.swing.JLabel();
        LoginButton = new javax.swing.JButton();
        RegisterButton = new javax.swing.JButton();
        PasswordTextField = new javax.swing.JPasswordField();
        clientLandingPanel = new GradientPanel();
        ClientListPanel = new javax.swing.JScrollPane();
        ClientList = new javax.swing.JList<>();
        ClientNewTicketButton = new javax.swing.JButton();
        ClientTicketListLabel = new javax.swing.JLabel();
        ClientViewTicketButton = new javax.swing.JButton();
        ClientExitButton = new javax.swing.JButton();
        managerLandingColorLegend1 = new javax.swing.JLabel();
        agentLandingPanel = new GradientPanel();
        AgentGenListPanel = new javax.swing.JScrollPane();
        AgentGenList = new javax.swing.JList<>();
        AgentClaimListPanel = new javax.swing.JScrollPane();
        AgentClaimList = new javax.swing.JList<>();
        AgentClaimListLabel = new javax.swing.JLabel();
        AgentGenListLabel = new javax.swing.JLabel();
        AgentNewTicketButton = new javax.swing.JButton();
        AgentGenViewButton = new javax.swing.JButton();
        AgentClaimViewButton = new javax.swing.JButton();
        AgentExitButton = new javax.swing.JButton();
        agentLandingColorLegend = new javax.swing.JLabel();
        agentIdSearchButton = new javax.swing.JButton();
        agentAgentSearchButton = new javax.swing.JButton();
        managerLandingPanel = new GradientPanel();
        ManagerGenListPanel = new javax.swing.JScrollPane();
        ManagerGenList = new javax.swing.JList<>();
        ManagerClaimListPanel = new javax.swing.JScrollPane();
        ManagerClaimList = new javax.swing.JList<>();
        ManagerClaimListLabel = new javax.swing.JLabel();
        ManagerGenListLabel = new javax.swing.JLabel();
        ManagerNewTicketButton = new javax.swing.JButton();
        ManagerGenViewButton = new javax.swing.JButton();
        ManagerClaimViewButton = new javax.swing.JButton();
        ManagerTagSearchButton = new javax.swing.JButton();
        ManagerExitButton = new javax.swing.JButton();
        ManagerClientViewButton = new javax.swing.JButton();
        managerLandingColorLegend = new javax.swing.JLabel();
        managerIdSearchButton = new javax.swing.JButton();
        managerViewAllButton = new javax.swing.JButton();
        managerAgentSearchButton = new javax.swing.JButton();
        managerLogsButton = new javax.swing.JButton();
        clientTicketPanel = new GradientPanel();
        clientDescScrollPane = new javax.swing.JScrollPane();
        clientDesc = new javax.swing.JTextArea();
        clientTicketStatus = new javax.swing.JLabel();
        clientTicketName = new javax.swing.JLabel();
        clientTicketDescriptionLabel = new javax.swing.JLabel();
        clientTicketCommentLabel = new javax.swing.JLabel();
        clientCommentScrollPane = new javax.swing.JScrollPane();
        clientComments = new javax.swing.JTextArea();
        clientAddCommentsButton = new javax.swing.JButton();
        clientCloseTicketButton = new javax.swing.JButton();
        clientTicketReturnButton = new javax.swing.JButton();
        clientRelatedTicketsButton = new javax.swing.JButton();
        clientTimestampLabel = new javax.swing.JLabel();
        clientLastUpdateLabel = new javax.swing.JLabel();
        agentTicketPanel = new GradientPanel();
        agentDescScrollPane = new javax.swing.JScrollPane();
        agentDesc = new javax.swing.JTextArea();
        agentTicketStatus = new javax.swing.JLabel();
        agentTicketName = new javax.swing.JLabel();
        agentTicketDescriptionLabel = new javax.swing.JLabel();
        agentTicketCommentLabel = new javax.swing.JLabel();
        agentCommentScrollPane = new javax.swing.JScrollPane();
        agentComments = new javax.swing.JTextArea();
        agentAddCommentsButton = new javax.swing.JButton();
        agentChstatTicketButton = new javax.swing.JButton();
        agentTicketReturnButton = new javax.swing.JButton();
        agentTicketNoteLabel = new javax.swing.JLabel();
        agentNoteScrollPane = new javax.swing.JScrollPane();
        agentNotes = new javax.swing.JTextArea();
        agentAddNotesButton = new javax.swing.JButton();
        agentClaimTicketButton = new javax.swing.JButton();
        agentTagListButton = new javax.swing.JButton();
        agentTicketPriority = new javax.swing.JLabel();
        agentRelatedTicketsButton = new javax.swing.JButton();
        agentTimingChangeButton = new javax.swing.JButton();
        agentTimingLabel = new javax.swing.JLabel();
        agentTimestampLabel = new javax.swing.JLabel();
        agentLastUpdateLabel = new javax.swing.JLabel();
        managerTicketPanel = new GradientPanel();
        managerDescScrollPane = new javax.swing.JScrollPane();
        managerDesc = new javax.swing.JTextArea();
        managerTicketStatus = new javax.swing.JLabel();
        managerTicketName = new javax.swing.JLabel();
        managerTicketDescriptionLabel = new javax.swing.JLabel();
        managerTicketCommentLabel = new javax.swing.JLabel();
        managerCommentScrollPane = new javax.swing.JScrollPane();
        managerComments = new javax.swing.JTextArea();
        managerAddCommentsButton = new javax.swing.JButton();
        managerChstatTicketButton = new javax.swing.JButton();
        managerTicketReturnButton = new javax.swing.JButton();
        managerTicketNoteLabel = new javax.swing.JLabel();
        managerNoteScrollPane = new javax.swing.JScrollPane();
        managerNotes = new javax.swing.JTextArea();
        managerAddNotesButton = new javax.swing.JButton();
        managerAssignTicketButton = new javax.swing.JButton();
        managerTagListButton = new javax.swing.JButton();
        managerRelatedTicketsButton = new javax.swing.JButton();
        managerTicketPriority = new javax.swing.JLabel();
        managerTimingChangeButton = new javax.swing.JButton();
        managerTimingLabel = new javax.swing.JLabel();
        managerTimestampLabel = new javax.swing.JLabel();
        managerChangePriorityButton = new javax.swing.JButton();
        managerLastUpdateLabel = new javax.swing.JLabel();
        clientTicketCreatePanel = new GradientPanel();
        ClientTicketCreateName = new javax.swing.JTextField();
        ClientTicketCreateDescScroll = new javax.swing.JScrollPane();
        ClientTicketCreateDesc = new javax.swing.JTextArea();
        ClientTicketCreateNameLabel = new javax.swing.JLabel();
        ClientTicketCreateDescLabel = new javax.swing.JLabel();
        ClientTicketCreateHeaderText = new javax.swing.JLabel();
        ClientTicketCreateSubmitButton = new javax.swing.JButton();
        ClientTicketCreateCancelButton = new javax.swing.JButton();
        agentTicketCreatePanel = new GradientPanel();
        AgentTicketCreateName = new javax.swing.JTextField();
        AgentTicketCreateDescScroll = new javax.swing.JScrollPane();
        AgentTicketCreateDesc = new javax.swing.JTextArea();
        AgentTicketCreateNameLabel = new javax.swing.JLabel();
        AgentTicketCreateDescLabel = new javax.swing.JLabel();
        AgentTicketCreateHeaderText = new javax.swing.JLabel();
        AgentTicketCreateSubmitButton = new javax.swing.JButton();
        AgentTicketCreateCancelButton = new javax.swing.JButton();
        AgentTicketCreateClientLabel = new javax.swing.JLabel();
        AgentTicketCreateClient = new javax.swing.JTextField();
        managerTicketCreatePanel = new GradientPanel();
        ManagerTicketCreateName = new javax.swing.JTextField();
        ManagerTicketCreateDescScroll = new javax.swing.JScrollPane();
        ManagerTicketCreateDesc = new javax.swing.JTextArea();
        ManagerTicketCreateNameLabel = new javax.swing.JLabel();
        ManagerTicketCreateDescLabel = new javax.swing.JLabel();
        ManagerTicketCreateHeaderText = new javax.swing.JLabel();
        ManagerTicketCreateSubmitButton = new javax.swing.JButton();
        ManagerTicketCreateCancelButton = new javax.swing.JButton();
        ManagerTicketCreateClientLabel = new javax.swing.JLabel();
        ManagerTicketCreateClient = new javax.swing.JTextField();
        tagSearchPanel = new GradientPanel();
        tagSearchLabel = new javax.swing.JLabel();
        tagSearchBar = new javax.swing.JTextField();
        tagSearchButton = new javax.swing.JButton();
        tagSearchViewButton = new javax.swing.JButton();
        tagSearchBackButton = new javax.swing.JButton();
        tagSearchScrollPane = new javax.swing.JScrollPane();
        tagSearchList = new javax.swing.JList<>();
        agentTagListPanel = new GradientPanel();
        agentTagListScrollPane = new javax.swing.JScrollPane();
        agentTagListText = new javax.swing.JTextArea();
        agentTagListSaveButton = new javax.swing.JButton();
        agentTagListCancelButton = new javax.swing.JButton();
        agentTagListTitle = new javax.swing.JLabel();
        agentTagListWarning = new javax.swing.JLabel();
        managerTagListPanel = new GradientPanel();
        managerTagListScrollPane = new javax.swing.JScrollPane();
        managerTagListText = new javax.swing.JTextArea();
        managerTagListSaveButton = new javax.swing.JButton();
        managerTagListCancelButton = new javax.swing.JButton();
        managerTagListTitle = new javax.swing.JLabel();
        managerTagListWarning = new javax.swing.JLabel();
        agentNotesPanel = new GradientPanel();
        agentNotesScrollPane = new javax.swing.JScrollPane();
        agentNotesText = new javax.swing.JTextArea();
        agentNotesSaveButton = new javax.swing.JButton();
        agentNotesCancelButton = new javax.swing.JButton();
        agentNotesTitle = new javax.swing.JLabel();
        managerNotesPanel = new GradientPanel();
        managerNotesScrollPane = new javax.swing.JScrollPane();
        managerNotesText = new javax.swing.JTextArea();
        managerNotesSaveButton = new javax.swing.JButton();
        managerNotesCancelButton = new javax.swing.JButton();
        managerNotesTitle = new javax.swing.JLabel();
        clientRelatedTicketsPanel = new GradientPanel();
        clientRelatedScrollPane = new javax.swing.JScrollPane();
        clientRelatedList = new javax.swing.JList<>();
        clientRelatedViewButton = new javax.swing.JButton();
        clientRelatedCancelButton = new javax.swing.JButton();
        clientRelatedLabel = new javax.swing.JLabel();
        agentRelatedTicketsPanel = new GradientPanel();
        agentRelatedScrollPane = new javax.swing.JScrollPane();
        agentRelatedList = new javax.swing.JList<>();
        agentRelatedViewButton = new javax.swing.JButton();
        agentRelatedCancelButton = new javax.swing.JButton();
        agentRelatedLabel = new javax.swing.JLabel();
        agentRelatedAddButton = new javax.swing.JButton();
        managerRelatedTicketsPanel = new GradientPanel();
        managerRelatedScrollPane = new javax.swing.JScrollPane();
        managerRelatedList = new javax.swing.JList<>();
        managerRelatedViewButton = new javax.swing.JButton();
        managerRelatedCancelButton = new javax.swing.JButton();
        managerRelatedLabel = new javax.swing.JLabel();
        managerRelatedAddButton = new javax.swing.JButton();
        managerViewAllPanel = new GradientPanel();
        managerViewAllScrollPane = new javax.swing.JScrollPane();
        managerViewAllList = new javax.swing.JList<>();
        managerViewAllLabel = new javax.swing.JLabel();
        managerViewAllViewButton = new javax.swing.JButton();
        managerViewAllCancelButton = new javax.swing.JButton();
        agentAgentSearchPanel = new GradientPanel();
        agentAgentSearchLabel = new javax.swing.JLabel();
        agentAgentSearchBar = new javax.swing.JTextField();
        agentAgentSearchCheckButton = new javax.swing.JButton();
        agentAgentSearchViewButton = new javax.swing.JButton();
        agentAgentSearchBackButton = new javax.swing.JButton();
        agentAgentSearchScrollPane = new javax.swing.JScrollPane();
        agentAgentSearchList = new javax.swing.JList<>();
        managerAgentSearchPanel = new GradientPanel();
        managerAgentSearchLabel = new javax.swing.JLabel();
        managerAgentSearchBar = new javax.swing.JTextField();
        managerAgentSearchCheckButton = new javax.swing.JButton();
        managerAgentSearchViewButton = new javax.swing.JButton();
        managerAgentSearchBackButton = new javax.swing.JButton();
        managerAgentSearchScrollPane = new javax.swing.JScrollPane();
        managerAgentSearchList = new javax.swing.JList<>();
        managerLogsPanel = new GradientPanel();
        managerLogsScrollPane = new javax.swing.JScrollPane();
        managerLogsTable = new javax.swing.JTable();
        managerLogsBackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TopPane.setForeground(new java.awt.Color(235, 235, 235));
        TopPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        TopPane.setOpaque(true);

        LoginPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        ExitButton.setBackground(new java.awt.Color(128, 64, 64));
        ExitButton.setForeground(new java.awt.Color(235, 235, 235));
        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ExitButtonActionPerformed(evt);
            }
        });

        UsernameTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.gray, java.awt.Color.darkGray));

        UsernameLabel.setBackground(new java.awt.Color(144, 144, 144));
        UsernameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        UsernameLabel.setText("Username");
        UsernameLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        PasswordLabel.setBackground(new java.awt.Color(144, 144, 144));
        PasswordLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PasswordLabel.setText("Password");
        PasswordLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        LoginButton.setText("Log In");
        LoginButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                LoginButtonActionPerformed(evt);
            }
        });

        RegisterButton.setText("Register");
        RegisterButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RegisterButtonActionPerformed(evt);
            }
        });

        PasswordTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.gray, java.awt.Color.darkGray));

        javax.swing.GroupLayout LoginPanelLayout = new javax.swing.GroupLayout(LoginPanel);
        LoginPanel.setLayout(LoginPanelLayout);
        LoginPanelLayout.setHorizontalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(UsernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                    .addComponent(PasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PasswordTextField)
                    .addComponent(UsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(LoginButton)
                .addGap(122, 122, 122)
                .addComponent(RegisterButton)
                .addGap(0, 185, Short.MAX_VALUE))
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ExitButton)
                .addGap(296, 296, 296))
        );
        LoginPanelLayout.setVerticalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginPanelLayout.createSequentialGroup()
                .addContainerGap(134, Short.MAX_VALUE)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(UsernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UsernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(PasswordTextField))
                .addGap(50, 50, 50)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoginButton)
                    .addComponent(RegisterButton))
                .addGap(43, 43, 43)
                .addComponent(ExitButton)
                .addGap(30, 30, 30))
        );

        TopPane.addTab("Login", LoginPanel);

        clientLandingPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ClientList.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ClientListPanel.setViewportView(ClientList);

        ClientNewTicketButton.setText("New Ticket");
        ClientNewTicketButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ClientNewTicketButtonActionPerformed(evt);
            }
        });

        ClientTicketListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ClientTicketListLabel.setText("Your Tickets");
        ClientTicketListLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ClientViewTicketButton.setText("View Ticket");
        ClientViewTicketButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ClientViewTicketButtonActionPerformed(evt);
            }
        });

        ClientExitButton.setBackground(new java.awt.Color(128, 64, 64));
        ClientExitButton.setForeground(new java.awt.Color(235, 235, 235));
        ClientExitButton.setText("Exit");
        ClientExitButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ClientExitButtonActionPerformed(evt);
            }
        });

        managerLandingColorLegend1.setForeground(new java.awt.Color(231, 231, 231));
        managerLandingColorLegend1.setText("Blue: Low Priority    Yellow: High Priority   Red: Critical Priority   Gray: Closed");

        javax.swing.GroupLayout clientLandingPanelLayout = new javax.swing.GroupLayout(clientLandingPanel);
        clientLandingPanel.setLayout(clientLandingPanelLayout);
        clientLandingPanelLayout.setHorizontalGroup(
            clientLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientLandingPanelLayout.createSequentialGroup()
                .addGroup(clientLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientLandingPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(managerLandingColorLegend1)
                        .addGap(61, 61, 61)
                        .addComponent(ClientExitButton))
                    .addGroup(clientLandingPanelLayout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addGroup(clientLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ClientListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                            .addComponent(ClientTicketListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 70, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clientLandingPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(clientLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ClientNewTicketButton)
                    .addComponent(ClientViewTicketButton))
                .addGap(273, 273, 273))
        );
        clientLandingPanelLayout.setVerticalGroup(
            clientLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clientLandingPanelLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(ClientTicketListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClientListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(ClientViewTicketButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ClientNewTicketButton)
                .addGap(28, 28, 28)
                .addGroup(clientLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClientExitButton)
                    .addComponent(managerLandingColorLegend1))
                .addContainerGap())
        );

        TopPane.addTab("Client Landing", clientLandingPanel);

        agentLandingPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        AgentGenList.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        AgentGenListPanel.setViewportView(AgentGenList);

        AgentClaimList.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        AgentClaimListPanel.setViewportView(AgentClaimList);

        AgentClaimListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        AgentClaimListLabel.setText("Your Tickets");
        AgentClaimListLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        AgentGenListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        AgentGenListLabel.setText("Unclaimed Tickets");
        AgentGenListLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        AgentNewTicketButton.setText("New Ticket");
        AgentNewTicketButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AgentNewTicketButtonActionPerformed(evt);
            }
        });

        AgentGenViewButton.setText("View");
        AgentGenViewButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AgentGenViewButtonActionPerformed(evt);
            }
        });

        AgentClaimViewButton.setText("View");
        AgentClaimViewButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AgentClaimViewButtonActionPerformed(evt);
            }
        });

        AgentExitButton.setBackground(new java.awt.Color(128, 64, 64));
        AgentExitButton.setForeground(new java.awt.Color(235, 235, 235));
        AgentExitButton.setText("Exit");
        AgentExitButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AgentExitButtonActionPerformed(evt);
            }
        });

        agentLandingColorLegend.setForeground(new java.awt.Color(231, 231, 231));
        agentLandingColorLegend.setText("Blue: Low Priority    Yellow: High Priority   Red: Critical Priority");

        agentIdSearchButton.setText("ID Search");
        agentIdSearchButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentIdSearchButtonActionPerformed(evt);
            }
        });

        agentAgentSearchButton.setText("Agent Search");
        agentAgentSearchButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentAgentSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout agentLandingPanelLayout = new javax.swing.GroupLayout(agentLandingPanel);
        agentLandingPanel.setLayout(agentLandingPanelLayout);
        agentLandingPanelLayout.setHorizontalGroup(
            agentLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentLandingPanelLayout.createSequentialGroup()
                .addContainerGap(123, Short.MAX_VALUE)
                .addGroup(agentLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agentLandingPanelLayout.createSequentialGroup()
                        .addGroup(agentLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(agentLandingPanelLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(AgentNewTicketButton)
                                .addGap(48, 48, 48)
                                .addComponent(agentIdSearchButton)
                                .addGap(48, 48, 48)
                                .addComponent(agentAgentSearchButton))
                            .addGroup(agentLandingPanelLayout.createSequentialGroup()
                                .addGroup(agentLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(AgentGenListLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(AgentClaimListLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(AgentClaimListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                                    .addComponent(AgentGenListPanel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(agentLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AgentGenViewButton)
                                    .addComponent(AgentClaimViewButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agentLandingPanelLayout.createSequentialGroup()
                        .addComponent(agentLandingColorLegend)
                        .addGap(114, 114, 114)
                        .addComponent(AgentExitButton)
                        .addContainerGap())))
        );
        agentLandingPanelLayout.setVerticalGroup(
            agentLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agentLandingPanelLayout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(agentLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(agentLandingPanelLayout.createSequentialGroup()
                        .addComponent(AgentGenListLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AgentGenListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(agentLandingPanelLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(AgentGenViewButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(AgentClaimListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(agentLandingPanelLayout.createSequentialGroup()
                        .addComponent(AgentClaimListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addGroup(agentLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AgentNewTicketButton)
                            .addComponent(agentIdSearchButton)
                            .addComponent(agentAgentSearchButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agentLandingPanelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(AgentClaimViewButton)
                        .addGap(72, 72, 72)))
                .addGroup(agentLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(AgentExitButton)
                    .addComponent(agentLandingColorLegend))
                .addContainerGap())
        );

        TopPane.addTab("Agent Landing", agentLandingPanel);

        managerLandingPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ManagerGenList.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ManagerGenListPanel.setViewportView(ManagerGenList);

        ManagerClaimList.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ManagerClaimListPanel.setViewportView(ManagerClaimList);

        ManagerClaimListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ManagerClaimListLabel.setText("Your Tickets");
        ManagerClaimListLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ManagerGenListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ManagerGenListLabel.setText("Unclaimed Tickets");
        ManagerGenListLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ManagerNewTicketButton.setText("New Ticket");
        ManagerNewTicketButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManagerNewTicketButtonActionPerformed(evt);
            }
        });

        ManagerGenViewButton.setText("View");
        ManagerGenViewButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManagerGenViewButtonActionPerformed(evt);
            }
        });

        ManagerClaimViewButton.setText("View");
        ManagerClaimViewButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManagerClaimViewButtonActionPerformed(evt);
            }
        });

        ManagerTagSearchButton.setText("Tag Search");
        ManagerTagSearchButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManagerTagSearchButtonActionPerformed(evt);
            }
        });

        ManagerExitButton.setBackground(new java.awt.Color(128, 64, 64));
        ManagerExitButton.setForeground(new java.awt.Color(235, 235, 235));
        ManagerExitButton.setText("Exit");
        ManagerExitButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManagerExitButtonActionPerformed(evt);
            }
        });

        ManagerClientViewButton.setText("Open Client View");
        ManagerClientViewButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManagerClientViewButtonActionPerformed(evt);
            }
        });

        managerLandingColorLegend.setForeground(new java.awt.Color(231, 231, 231));
        managerLandingColorLegend.setText("Blue: Low Priority    Yellow: High Priority   Red: Critical Priority   Gray: Closed");

        managerIdSearchButton.setText("ID Search");
        managerIdSearchButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerIdSearchButtonActionPerformed(evt);
            }
        });

        managerViewAllButton.setText("View All");
        managerViewAllButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerViewAllButtonActionPerformed(evt);
            }
        });

        managerAgentSearchButton.setText("Agent Search");
        managerAgentSearchButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerAgentSearchButtonActionPerformed(evt);
            }
        });

        managerLogsButton.setText("Logs");
        managerLogsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerLogsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managerLandingPanelLayout = new javax.swing.GroupLayout(managerLandingPanel);
        managerLandingPanel.setLayout(managerLandingPanelLayout);
        managerLandingPanelLayout.setHorizontalGroup(
            managerLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerLandingPanelLayout.createSequentialGroup()
                .addComponent(ManagerClientViewButton)
                .addGap(18, 18, 18)
                .addComponent(managerLogsButton)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(managerLandingPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(managerLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managerLandingPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ManagerExitButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managerLandingPanelLayout.createSequentialGroup()
                        .addGroup(managerLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managerLandingPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(managerLandingColorLegend)
                                .addGap(70, 70, 70))
                            .addGroup(managerLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(managerLandingPanelLayout.createSequentialGroup()
                                    .addComponent(ManagerClaimListPanel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ManagerClaimViewButton))
                                .addGroup(managerLandingPanelLayout.createSequentialGroup()
                                    .addGroup(managerLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(ManagerClaimListLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ManagerGenListPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                                        .addComponent(ManagerGenListLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ManagerGenViewButton)))
                            .addGroup(managerLandingPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(ManagerNewTicketButton)
                                .addGap(27, 27, 27)
                                .addComponent(managerIdSearchButton)
                                .addGap(28, 28, 28)
                                .addComponent(managerViewAllButton)
                                .addGap(27, 27, 27)
                                .addComponent(ManagerTagSearchButton)
                                .addGap(26, 26, 26)
                                .addComponent(managerAgentSearchButton)))
                        .addGap(36, 36, 36))))
        );
        managerLandingPanelLayout.setVerticalGroup(
            managerLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerLandingPanelLayout.createSequentialGroup()
                .addGroup(managerLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ManagerClientViewButton)
                    .addComponent(managerLogsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ManagerGenListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(managerLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managerLandingPanelLayout.createSequentialGroup()
                        .addComponent(ManagerGenListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(ManagerClaimListLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ManagerClaimListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(managerLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ManagerNewTicketButton)
                            .addComponent(ManagerTagSearchButton)
                            .addComponent(managerIdSearchButton)
                            .addComponent(managerViewAllButton)
                            .addComponent(managerAgentSearchButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managerLandingPanelLayout.createSequentialGroup()
                        .addComponent(ManagerGenViewButton)
                        .addGap(90, 90, 90)
                        .addComponent(ManagerClaimViewButton)
                        .addGap(65, 65, 65)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(managerLandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ManagerExitButton)
                    .addComponent(managerLandingColorLegend)))
        );

        TopPane.addTab("Manager Landing", managerLandingPanel);

        clientTicketPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        clientDesc.setEditable(false);
        clientDesc.setColumns(20);
        clientDesc.setLineWrap(true);
        clientDesc.setRows(5);
        clientDescScrollPane.setViewportView(clientDesc);

        clientTicketStatus.setText("Status: Undefined");
        clientTicketStatus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        clientTicketName.setText("Name: Undefined");
        clientTicketName.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        clientTicketDescriptionLabel.setText("Description");

        clientTicketCommentLabel.setText("Comments");

        clientComments.setEditable(false);
        clientComments.setColumns(20);
        clientComments.setLineWrap(true);
        clientComments.setRows(5);
        clientCommentScrollPane.setViewportView(clientComments);

        clientAddCommentsButton.setText("Add Comment");
        clientAddCommentsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clientAddCommentsButtonActionPerformed(evt);
            }
        });

        clientCloseTicketButton.setBackground(new java.awt.Color(96, 64, 64));
        clientCloseTicketButton.setForeground(new java.awt.Color(235, 235, 235));
        clientCloseTicketButton.setText("Close Ticket");
        clientCloseTicketButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clientCloseTicketButtonActionPerformed(evt);
            }
        });

        clientTicketReturnButton.setBackground(new java.awt.Color(128, 64, 64));
        clientTicketReturnButton.setForeground(new java.awt.Color(235, 235, 235));
        clientTicketReturnButton.setText("Go Back");
        clientTicketReturnButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clientTicketReturnButtonActionPerformed(evt);
            }
        });

        clientRelatedTicketsButton.setText("Related Tickets");
        clientRelatedTicketsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clientRelatedTicketsButtonActionPerformed(evt);
            }
        });

        clientTimestampLabel.setText(" First Posted: Undefined");
        clientTimestampLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        clientLastUpdateLabel.setText(" Last Update: Undefined");
        clientLastUpdateLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout clientTicketPanelLayout = new javax.swing.GroupLayout(clientTicketPanel);
        clientTicketPanel.setLayout(clientTicketPanelLayout);
        clientTicketPanelLayout.setHorizontalGroup(
            clientTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientTicketPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(clientAddCommentsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clientRelatedTicketsButton)
                .addGap(67, 67, 67)
                .addComponent(clientCloseTicketButton)
                .addGap(65, 65, 65)
                .addComponent(clientTicketReturnButton)
                .addGap(14, 14, 14))
            .addGroup(clientTicketPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(clientTicketPanelLayout.createSequentialGroup()
                        .addComponent(clientTicketDescriptionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clientDescScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(clientTicketPanelLayout.createSequentialGroup()
                        .addComponent(clientTicketCommentLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clientCommentScrollPane))
                    .addComponent(clientTicketName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clientTicketStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clientTimestampLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clientLastUpdateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        clientTicketPanelLayout.setVerticalGroup(
            clientTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientTicketPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(clientTicketName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(clientTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientTicketDescriptionLabel)
                    .addComponent(clientDescScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(clientTicketStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientTicketCommentLabel)
                    .addComponent(clientCommentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientTimestampLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clientLastUpdateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientAddCommentsButton)
                    .addGroup(clientTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(clientTicketReturnButton)
                        .addComponent(clientCloseTicketButton)
                        .addComponent(clientRelatedTicketsButton)))
                .addContainerGap())
        );

        TopPane.addTab("Ticket Details", clientTicketPanel);

        agentTicketPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        agentDesc.setEditable(false);
        agentDesc.setColumns(20);
        agentDesc.setLineWrap(true);
        agentDesc.setRows(5);
        agentDescScrollPane.setViewportView(agentDesc);

        agentTicketStatus.setText("Status: Undefined");
        agentTicketStatus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        agentTicketName.setText("Name: Undefined");
        agentTicketName.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        agentTicketDescriptionLabel.setText("Description");

        agentTicketCommentLabel.setText("Comments");

        agentComments.setEditable(false);
        agentComments.setColumns(20);
        agentComments.setLineWrap(true);
        agentComments.setRows(5);
        agentCommentScrollPane.setViewportView(agentComments);

        agentAddCommentsButton.setText("Add Comment");
        agentAddCommentsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentAddCommentsButtonActionPerformed(evt);
            }
        });

        agentChstatTicketButton.setText("Change Status");
        agentChstatTicketButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentChstatTicketButtonActionPerformed(evt);
            }
        });

        agentTicketReturnButton.setBackground(new java.awt.Color(128, 64, 64));
        agentTicketReturnButton.setForeground(new java.awt.Color(235, 235, 235));
        agentTicketReturnButton.setText("Go Back");
        agentTicketReturnButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentTicketReturnButtonActionPerformed(evt);
            }
        });

        agentTicketNoteLabel.setText("Notes");

        agentNotes.setEditable(false);
        agentNotes.setColumns(20);
        agentNotes.setLineWrap(true);
        agentNotes.setRows(5);
        agentNoteScrollPane.setViewportView(agentNotes);

        agentAddNotesButton.setText("Add Notes");
        agentAddNotesButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentAddNotesButtonActionPerformed(evt);
            }
        });

        agentClaimTicketButton.setText("Claim");
        agentClaimTicketButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentClaimTicketButtonActionPerformed(evt);
            }
        });

        agentTagListButton.setText("Tags");
        agentTagListButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentTagListButtonActionPerformed(evt);
            }
        });

        agentTicketPriority.setText("Priority: Undefined");
        agentTicketPriority.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        agentTicketPriority.setOpaque(true);

        agentRelatedTicketsButton.setText("Related Tickets");
        agentRelatedTicketsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentRelatedTicketsButtonActionPerformed(evt);
            }
        });

        agentTimingChangeButton.setText("Change");
        agentTimingChangeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentTimingChangeButtonActionPerformed(evt);
            }
        });

        agentTimingLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        agentTimingLabel.setText("Timing: Undefined  ");
        agentTimingLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        agentTimestampLabel.setText(" First Posted: Undefined");
        agentTimestampLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        agentLastUpdateLabel.setText(" Last Update: Undefined");
        agentLastUpdateLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout agentTicketPanelLayout = new javax.swing.GroupLayout(agentTicketPanel);
        agentTicketPanel.setLayout(agentTicketPanelLayout);
        agentTicketPanelLayout.setHorizontalGroup(
            agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentTicketPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(agentTicketPanelLayout.createSequentialGroup()
                        .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(agentTicketPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(agentTicketDescriptionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(agentDescScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(agentTicketPanelLayout.createSequentialGroup()
                                .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(agentTicketStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(agentTicketPanelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(agentTicketCommentLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(agentCommentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(agentTimestampLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(agentLastUpdateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(26, 26, 26)
                                .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agentTicketPanelLayout.createSequentialGroup()
                                        .addComponent(agentTimingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(agentTimingChangeButton))
                                    .addGroup(agentTicketPanelLayout.createSequentialGroup()
                                        .addComponent(agentTicketNoteLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(agentNoteScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(agentTicketPriority, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(agentTicketPanelLayout.createSequentialGroup()
                        .addComponent(agentTicketName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(agentClaimTicketButton))
                    .addGroup(agentTicketPanelLayout.createSequentialGroup()
                        .addComponent(agentAddCommentsButton)
                        .addGap(18, 18, 18)
                        .addComponent(agentAddNotesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(agentRelatedTicketsButton)
                        .addGap(18, 18, 18)
                        .addComponent(agentTagListButton)
                        .addGap(18, 18, 18)
                        .addComponent(agentChstatTicketButton)
                        .addGap(18, 18, 18)
                        .addComponent(agentTicketReturnButton))))
        );
        agentTicketPanelLayout.setVerticalGroup(
            agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentTicketPanelLayout.createSequentialGroup()
                .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agentClaimTicketButton)
                    .addComponent(agentTicketName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(agentTicketDescriptionLabel)
                    .addComponent(agentDescScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(agentTicketStatus)
                    .addComponent(agentTicketPriority))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(agentCommentScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .addComponent(agentNoteScrollPane)
                    .addGroup(agentTicketPanelLayout.createSequentialGroup()
                        .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(agentTicketNoteLabel)
                            .addComponent(agentTicketCommentLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agentTicketPanelLayout.createSequentialGroup()
                        .addComponent(agentTimestampLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(agentLastUpdateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agentTicketPanelLayout.createSequentialGroup()
                        .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(agentTimingLabel)
                            .addComponent(agentTimingChangeButton))
                        .addGap(24, 24, 24)))
                .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(agentAddCommentsButton)
                        .addComponent(agentAddNotesButton))
                    .addGroup(agentTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(agentTicketReturnButton)
                        .addComponent(agentChstatTicketButton)
                        .addComponent(agentTagListButton)
                        .addComponent(agentRelatedTicketsButton)))
                .addContainerGap())
        );

        TopPane.addTab("Ticket Details", agentTicketPanel);

        managerTicketPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        managerDesc.setEditable(false);
        managerDesc.setColumns(20);
        managerDesc.setLineWrap(true);
        managerDesc.setRows(5);
        managerDescScrollPane.setViewportView(managerDesc);

        managerTicketStatus.setText(" Status: Undefined");
        managerTicketStatus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        managerTicketName.setText(" Name: Undefined");
        managerTicketName.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        managerTicketDescriptionLabel.setText("Description");

        managerTicketCommentLabel.setText("Comments");

        managerComments.setEditable(false);
        managerComments.setColumns(20);
        managerComments.setLineWrap(true);
        managerComments.setRows(5);
        managerCommentScrollPane.setViewportView(managerComments);

        managerAddCommentsButton.setText("Add Comment");
        managerAddCommentsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerAddCommentsButtonActionPerformed(evt);
            }
        });

        managerChstatTicketButton.setText("Change Status");
        managerChstatTicketButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerChstatTicketButtonActionPerformed(evt);
            }
        });

        managerTicketReturnButton.setBackground(new java.awt.Color(128, 64, 64));
        managerTicketReturnButton.setForeground(new java.awt.Color(235, 235, 235));
        managerTicketReturnButton.setText("Go Back");
        managerTicketReturnButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerTicketReturnButtonActionPerformed(evt);
            }
        });

        managerTicketNoteLabel.setText("Notes");

        managerNotes.setEditable(false);
        managerNotes.setColumns(20);
        managerNotes.setLineWrap(true);
        managerNotes.setRows(5);
        managerNoteScrollPane.setViewportView(managerNotes);

        managerAddNotesButton.setText("Add Notes");
        managerAddNotesButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerAddNotesButtonActionPerformed(evt);
            }
        });

        managerAssignTicketButton.setText("Assign");
        managerAssignTicketButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerAssignTicketButtonActionPerformed(evt);
            }
        });

        managerTagListButton.setText("Tags");
        managerTagListButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerTagListButtonActionPerformed(evt);
            }
        });

        managerRelatedTicketsButton.setText("Related Tickets");
        managerRelatedTicketsButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerRelatedTicketsButtonActionPerformed(evt);
            }
        });

        managerTicketPriority.setText(" Priority: Undefined");
        managerTicketPriority.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        managerTicketPriority.setOpaque(true);

        managerTimingChangeButton.setText("Change");
        managerTimingChangeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerTimingChangeButtonActionPerformed(evt);
            }
        });

        managerTimingLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        managerTimingLabel.setText("Timing: Undefined  ");
        managerTimingLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        managerTimestampLabel.setText(" First Posted: Undefined");
        managerTimestampLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        managerChangePriorityButton.setText("Change");
        managerChangePriorityButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerChangePriorityButtonActionPerformed(evt);
            }
        });

        managerLastUpdateLabel.setText(" Last Update: Undefined");
        managerLastUpdateLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout managerTicketPanelLayout = new javax.swing.GroupLayout(managerTicketPanel);
        managerTicketPanel.setLayout(managerTicketPanelLayout);
        managerTicketPanelLayout.setHorizontalGroup(
            managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerTicketPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managerTicketPanelLayout.createSequentialGroup()
                        .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(managerTicketPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(managerTicketDescriptionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(managerDescScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managerTicketPanelLayout.createSequentialGroup()
                                .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(managerTicketPanelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(managerTicketCommentLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(managerCommentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(managerTicketStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(managerTimestampLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(managerLastUpdateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managerTicketPanelLayout.createSequentialGroup()
                                            .addComponent(managerTimingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGap(18, 18, 18)
                                            .addComponent(managerTimingChangeButton))
                                        .addGroup(managerTicketPanelLayout.createSequentialGroup()
                                            .addComponent(managerTicketNoteLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(managerNoteScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(managerTicketPanelLayout.createSequentialGroup()
                                        .addComponent(managerTicketPriority, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(managerChangePriorityButton)))))
                        .addContainerGap(21, Short.MAX_VALUE))
                    .addGroup(managerTicketPanelLayout.createSequentialGroup()
                        .addComponent(managerTicketName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(managerAssignTicketButton))
                    .addGroup(managerTicketPanelLayout.createSequentialGroup()
                        .addComponent(managerAddCommentsButton)
                        .addGap(18, 18, 18)
                        .addComponent(managerAddNotesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(managerRelatedTicketsButton)
                        .addGap(18, 18, 18)
                        .addComponent(managerTagListButton)
                        .addGap(18, 18, 18)
                        .addComponent(managerChstatTicketButton)
                        .addGap(18, 18, 18)
                        .addComponent(managerTicketReturnButton))))
        );
        managerTicketPanelLayout.setVerticalGroup(
            managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerTicketPanelLayout.createSequentialGroup()
                .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managerAssignTicketButton)
                    .addComponent(managerTicketName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(managerTicketDescriptionLabel)
                    .addComponent(managerDescScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managerTicketStatus)
                    .addComponent(managerTicketPriority)
                    .addComponent(managerChangePriorityButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(managerTicketNoteLabel)
                    .addComponent(managerTicketCommentLabel)
                    .addComponent(managerNoteScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                    .addComponent(managerCommentScrollPane))
                .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managerTicketPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(managerTimingLabel)
                            .addComponent(managerTimingChangeButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managerTicketPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(managerTimestampLabel)
                        .addGap(9, 9, 9)
                        .addComponent(managerLastUpdateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(managerAddCommentsButton)
                        .addComponent(managerAddNotesButton))
                    .addGroup(managerTicketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(managerTicketReturnButton)
                        .addComponent(managerChstatTicketButton)
                        .addComponent(managerTagListButton)
                        .addComponent(managerRelatedTicketsButton)))
                .addContainerGap())
        );

        TopPane.addTab("Ticket Details", managerTicketPanel);

        clientTicketCreatePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ClientTicketCreateDesc.setColumns(20);
        ClientTicketCreateDesc.setRows(5);
        ClientTicketCreateDescScroll.setViewportView(ClientTicketCreateDesc);

        ClientTicketCreateNameLabel.setText("Name");

        ClientTicketCreateDescLabel.setText("Description");

        ClientTicketCreateHeaderText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ClientTicketCreateHeaderText.setText("Submitting new ticket");
        ClientTicketCreateHeaderText.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ClientTicketCreateSubmitButton.setText("Submit");
        ClientTicketCreateSubmitButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ClientTicketCreateSubmitButtonActionPerformed(evt);
            }
        });

        ClientTicketCreateCancelButton.setBackground(new java.awt.Color(128, 64, 64));
        ClientTicketCreateCancelButton.setForeground(new java.awt.Color(235, 235, 235));
        ClientTicketCreateCancelButton.setText("Cancel");
        ClientTicketCreateCancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ClientTicketCreateCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout clientTicketCreatePanelLayout = new javax.swing.GroupLayout(clientTicketCreatePanel);
        clientTicketCreatePanel.setLayout(clientTicketCreatePanelLayout);
        clientTicketCreatePanelLayout.setHorizontalGroup(
            clientTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientTicketCreatePanelLayout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(ClientTicketCreateSubmitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 198, Short.MAX_VALUE)
                .addComponent(ClientTicketCreateCancelButton)
                .addGap(157, 157, 157))
            .addGroup(clientTicketCreatePanelLayout.createSequentialGroup()
                .addGroup(clientTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientTicketCreatePanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(ClientTicketCreateDescLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clientTicketCreatePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ClientTicketCreateNameLabel)))
                .addGap(18, 18, 18)
                .addGroup(clientTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ClientTicketCreateHeaderText, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                    .addComponent(ClientTicketCreateName)
                    .addComponent(ClientTicketCreateDescScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        clientTicketCreatePanelLayout.setVerticalGroup(
            clientTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientTicketCreatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ClientTicketCreateHeaderText)
                .addGap(11, 11, 11)
                .addGroup(clientTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClientTicketCreateName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClientTicketCreateNameLabel))
                .addGap(18, 18, 18)
                .addGroup(clientTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ClientTicketCreateDescScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClientTicketCreateDescLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(clientTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClientTicketCreateSubmitButton)
                    .addComponent(ClientTicketCreateCancelButton))
                .addGap(24, 24, 24))
        );

        TopPane.addTab("New Ticket", clientTicketCreatePanel);

        agentTicketCreatePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        AgentTicketCreateDesc.setColumns(20);
        AgentTicketCreateDesc.setRows(5);
        AgentTicketCreateDescScroll.setViewportView(AgentTicketCreateDesc);

        AgentTicketCreateNameLabel.setText("Name");

        AgentTicketCreateDescLabel.setText("Description");

        AgentTicketCreateHeaderText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        AgentTicketCreateHeaderText.setText("Submitting new ticket");
        AgentTicketCreateHeaderText.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        AgentTicketCreateSubmitButton.setText("Submit");
        AgentTicketCreateSubmitButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AgentTicketCreateSubmitButtonActionPerformed(evt);
            }
        });

        AgentTicketCreateCancelButton.setBackground(new java.awt.Color(128, 64, 64));
        AgentTicketCreateCancelButton.setForeground(new java.awt.Color(235, 235, 235));
        AgentTicketCreateCancelButton.setText("Cancel");
        AgentTicketCreateCancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AgentTicketCreateCancelButtonActionPerformed(evt);
            }
        });

        AgentTicketCreateClientLabel.setText("Client ID");

        javax.swing.GroupLayout agentTicketCreatePanelLayout = new javax.swing.GroupLayout(agentTicketCreatePanel);
        agentTicketCreatePanel.setLayout(agentTicketCreatePanelLayout);
        agentTicketCreatePanelLayout.setHorizontalGroup(
            agentTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentTicketCreatePanelLayout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(AgentTicketCreateSubmitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AgentTicketCreateCancelButton)
                .addGap(155, 155, 155))
            .addGroup(agentTicketCreatePanelLayout.createSequentialGroup()
                .addGroup(agentTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(AgentTicketCreateClientLabel)
                    .addGroup(agentTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(agentTicketCreatePanelLayout.createSequentialGroup()
                            .addGap(15, 15, 15)
                            .addComponent(AgentTicketCreateDescLabel))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agentTicketCreatePanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(AgentTicketCreateNameLabel))))
                .addGap(18, 18, 18)
                .addGroup(agentTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(AgentTicketCreateHeaderText, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                    .addComponent(AgentTicketCreateName)
                    .addComponent(AgentTicketCreateDescScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                    .addComponent(AgentTicketCreateClient))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        agentTicketCreatePanelLayout.setVerticalGroup(
            agentTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentTicketCreatePanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(AgentTicketCreateHeaderText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AgentTicketCreateName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AgentTicketCreateNameLabel))
                .addGap(18, 18, 18)
                .addGroup(agentTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AgentTicketCreateDescLabel)
                    .addComponent(AgentTicketCreateDescScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(agentTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AgentTicketCreateClientLabel)
                    .addComponent(AgentTicketCreateClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(agentTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AgentTicketCreateSubmitButton)
                    .addComponent(AgentTicketCreateCancelButton))
                .addGap(24, 24, 24))
        );

        TopPane.addTab("New Ticket", agentTicketCreatePanel);

        managerTicketCreatePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ManagerTicketCreateDesc.setColumns(20);
        ManagerTicketCreateDesc.setRows(5);
        ManagerTicketCreateDescScroll.setViewportView(ManagerTicketCreateDesc);

        ManagerTicketCreateNameLabel.setText("Name");

        ManagerTicketCreateDescLabel.setText("Description");

        ManagerTicketCreateHeaderText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ManagerTicketCreateHeaderText.setText("Submitting new ticket");
        ManagerTicketCreateHeaderText.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ManagerTicketCreateSubmitButton.setText("Submit");
        ManagerTicketCreateSubmitButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManagerTicketCreateSubmitButtonActionPerformed(evt);
            }
        });

        ManagerTicketCreateCancelButton.setBackground(new java.awt.Color(128, 64, 64));
        ManagerTicketCreateCancelButton.setForeground(new java.awt.Color(235, 235, 235));
        ManagerTicketCreateCancelButton.setText("Cancel");
        ManagerTicketCreateCancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ManagerTicketCreateCancelButtonActionPerformed(evt);
            }
        });

        ManagerTicketCreateClientLabel.setText("Client ID");

        javax.swing.GroupLayout managerTicketCreatePanelLayout = new javax.swing.GroupLayout(managerTicketCreatePanel);
        managerTicketCreatePanel.setLayout(managerTicketCreatePanelLayout);
        managerTicketCreatePanelLayout.setHorizontalGroup(
            managerTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerTicketCreatePanelLayout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(ManagerTicketCreateSubmitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ManagerTicketCreateCancelButton)
                .addGap(146, 146, 146))
            .addGroup(managerTicketCreatePanelLayout.createSequentialGroup()
                .addGroup(managerTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ManagerTicketCreateClientLabel)
                    .addGroup(managerTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(managerTicketCreatePanelLayout.createSequentialGroup()
                            .addGap(15, 15, 15)
                            .addComponent(ManagerTicketCreateDescLabel))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managerTicketCreatePanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(ManagerTicketCreateNameLabel))))
                .addGap(18, 18, 18)
                .addGroup(managerTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ManagerTicketCreateHeaderText, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                    .addComponent(ManagerTicketCreateClient)
                    .addComponent(ManagerTicketCreateDescScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                    .addComponent(ManagerTicketCreateName))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        managerTicketCreatePanelLayout.setVerticalGroup(
            managerTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerTicketCreatePanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(ManagerTicketCreateHeaderText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(managerTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ManagerTicketCreateName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ManagerTicketCreateNameLabel))
                .addGap(18, 18, 18)
                .addGroup(managerTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ManagerTicketCreateDescLabel)
                    .addComponent(ManagerTicketCreateDescScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(managerTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ManagerTicketCreateClientLabel)
                    .addComponent(ManagerTicketCreateClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(managerTicketCreatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ManagerTicketCreateSubmitButton)
                    .addComponent(ManagerTicketCreateCancelButton))
                .addGap(24, 24, 24))
        );

        TopPane.addTab("New Ticket", managerTicketCreatePanel);

        tagSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tagSearchLabel.setText("Tag Search");

        tagSearchButton.setText("Search");
        tagSearchButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tagSearchButtonActionPerformed(evt);
            }
        });

        tagSearchViewButton.setText("View Ticket");
        tagSearchViewButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tagSearchViewButtonActionPerformed(evt);
            }
        });

        tagSearchBackButton.setBackground(new java.awt.Color(128, 64, 64));
        tagSearchBackButton.setForeground(new java.awt.Color(235, 235, 235));
        tagSearchBackButton.setText("Go Back");
        tagSearchBackButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tagSearchBackButtonActionPerformed(evt);
            }
        });

        tagSearchScrollPane.setViewportView(tagSearchList);

        javax.swing.GroupLayout tagSearchPanelLayout = new javax.swing.GroupLayout(tagSearchPanel);
        tagSearchPanel.setLayout(tagSearchPanelLayout);
        tagSearchPanelLayout.setHorizontalGroup(
            tagSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tagSearchPanelLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(tagSearchViewButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tagSearchBackButton)
                .addGap(86, 86, 86))
            .addGroup(tagSearchPanelLayout.createSequentialGroup()
                .addGroup(tagSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tagSearchPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tagSearchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tagSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tagSearchButton))
                    .addGroup(tagSearchPanelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(tagSearchScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        tagSearchPanelLayout.setVerticalGroup(
            tagSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tagSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tagSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tagSearchLabel)
                    .addComponent(tagSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tagSearchButton))
                .addGap(18, 18, 18)
                .addComponent(tagSearchScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tagSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tagSearchViewButton)
                    .addComponent(tagSearchBackButton))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        TopPane.addTab("Tag Search", tagSearchPanel);

        agentTagListPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        agentTagListText.setColumns(20);
        agentTagListText.setLineWrap(true);
        agentTagListText.setRows(5);
        agentTagListScrollPane.setViewportView(agentTagListText);

        agentTagListSaveButton.setText("Save");
        agentTagListSaveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentTagListSaveButtonActionPerformed(evt);
            }
        });

        agentTagListCancelButton.setBackground(new java.awt.Color(128, 64, 64));
        agentTagListCancelButton.setForeground(new java.awt.Color(235, 235, 235));
        agentTagListCancelButton.setText("Cancel");
        agentTagListCancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentTagListCancelButtonActionPerformed(evt);
            }
        });

        agentTagListTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        agentTagListTitle.setText("Tags for ticket #: UNDEFINED");
        agentTagListTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        agentTagListWarning.setText("Separate tags with both comma and space");

        javax.swing.GroupLayout agentTagListPanelLayout = new javax.swing.GroupLayout(agentTagListPanel);
        agentTagListPanel.setLayout(agentTagListPanelLayout);
        agentTagListPanelLayout.setHorizontalGroup(
            agentTagListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agentTagListPanelLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(agentTagListSaveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(agentTagListCancelButton)
                .addGap(118, 118, 118))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agentTagListPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(agentTagListWarning)
                .addGap(196, 196, 196))
            .addGroup(agentTagListPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(agentTagListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(agentTagListTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(agentTagListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        agentTagListPanelLayout.setVerticalGroup(
            agentTagListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentTagListPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(agentTagListTitle)
                .addGap(18, 18, 18)
                .addComponent(agentTagListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(agentTagListWarning)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(agentTagListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agentTagListSaveButton)
                    .addComponent(agentTagListCancelButton))
                .addGap(25, 25, 25))
        );

        TopPane.addTab("Tags", agentTagListPanel);

        managerTagListPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        managerTagListText.setColumns(20);
        managerTagListText.setLineWrap(true);
        managerTagListText.setRows(5);
        managerTagListScrollPane.setViewportView(managerTagListText);

        managerTagListSaveButton.setText("Save");
        managerTagListSaveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerTagListSaveButtonActionPerformed(evt);
            }
        });

        managerTagListCancelButton.setBackground(new java.awt.Color(128, 64, 64));
        managerTagListCancelButton.setForeground(new java.awt.Color(235, 235, 235));
        managerTagListCancelButton.setText("Cancel");
        managerTagListCancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerTagListCancelButtonActionPerformed(evt);
            }
        });

        managerTagListTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        managerTagListTitle.setText("Tags for ticket #: UNDEFINED");
        managerTagListTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        managerTagListWarning.setText("Separate tags with both comma and space");

        javax.swing.GroupLayout managerTagListPanelLayout = new javax.swing.GroupLayout(managerTagListPanel);
        managerTagListPanel.setLayout(managerTagListPanelLayout);
        managerTagListPanelLayout.setHorizontalGroup(
            managerTagListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managerTagListPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(managerTagListWarning)
                .addGap(198, 198, 198))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managerTagListPanelLayout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(managerTagListSaveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(managerTagListCancelButton)
                .addGap(101, 101, 101))
            .addGroup(managerTagListPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(managerTagListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(managerTagListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                    .addComponent(managerTagListTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        managerTagListPanelLayout.setVerticalGroup(
            managerTagListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerTagListPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(managerTagListTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(managerTagListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(managerTagListWarning)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(managerTagListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managerTagListSaveButton)
                    .addComponent(managerTagListCancelButton))
                .addGap(25, 25, 25))
        );

        TopPane.addTab("Tags", managerTagListPanel);

        agentNotesPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        agentNotesText.setColumns(20);
        agentNotesText.setLineWrap(true);
        agentNotesText.setRows(5);
        agentNotesScrollPane.setViewportView(agentNotesText);

        agentNotesSaveButton.setText("Save");
        agentNotesSaveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentNotesSaveButtonActionPerformed(evt);
            }
        });

        agentNotesCancelButton.setBackground(new java.awt.Color(128, 64, 64));
        agentNotesCancelButton.setForeground(new java.awt.Color(235, 235, 235));
        agentNotesCancelButton.setText("Cancel");
        agentNotesCancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentNotesCancelButtonActionPerformed(evt);
            }
        });

        agentNotesTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        agentNotesTitle.setText("Notes for ticket #: UNDEFINED");
        agentNotesTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout agentNotesPanelLayout = new javax.swing.GroupLayout(agentNotesPanel);
        agentNotesPanel.setLayout(agentNotesPanelLayout);
        agentNotesPanelLayout.setHorizontalGroup(
            agentNotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agentNotesPanelLayout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(agentNotesSaveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(agentNotesCancelButton)
                .addGap(131, 131, 131))
            .addGroup(agentNotesPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(agentNotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(agentNotesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                    .addComponent(agentNotesTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        agentNotesPanelLayout.setVerticalGroup(
            agentNotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentNotesPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(agentNotesTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(agentNotesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(agentNotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agentNotesSaveButton)
                    .addComponent(agentNotesCancelButton))
                .addGap(25, 25, 25))
        );

        TopPane.addTab("Notes", agentNotesPanel);

        managerNotesPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        managerNotesText.setColumns(20);
        managerNotesText.setLineWrap(true);
        managerNotesText.setRows(5);
        managerNotesScrollPane.setViewportView(managerNotesText);

        managerNotesSaveButton.setText("Save");
        managerNotesSaveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerNotesSaveButtonActionPerformed(evt);
            }
        });

        managerNotesCancelButton.setBackground(new java.awt.Color(128, 64, 64));
        managerNotesCancelButton.setForeground(new java.awt.Color(235, 235, 235));
        managerNotesCancelButton.setText("Cancel");
        managerNotesCancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerNotesCancelButtonActionPerformed(evt);
            }
        });

        managerNotesTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        managerNotesTitle.setText("Notes for ticket #: UNDEFINED");
        managerNotesTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout managerNotesPanelLayout = new javax.swing.GroupLayout(managerNotesPanel);
        managerNotesPanel.setLayout(managerNotesPanelLayout);
        managerNotesPanelLayout.setHorizontalGroup(
            managerNotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managerNotesPanelLayout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(managerNotesSaveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(managerNotesCancelButton)
                .addGap(131, 131, 131))
            .addGroup(managerNotesPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(managerNotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(managerNotesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                    .addComponent(managerNotesTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        managerNotesPanelLayout.setVerticalGroup(
            managerNotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerNotesPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(managerNotesTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(managerNotesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(managerNotesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managerNotesSaveButton)
                    .addComponent(managerNotesCancelButton))
                .addGap(25, 25, 25))
        );

        TopPane.addTab("Notes", managerNotesPanel);

        clientRelatedTicketsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        clientRelatedScrollPane.setViewportView(clientRelatedList);

        clientRelatedViewButton.setText("View");
        clientRelatedViewButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clientRelatedViewButtonActionPerformed(evt);
            }
        });

        clientRelatedCancelButton.setBackground(new java.awt.Color(128, 64, 64));
        clientRelatedCancelButton.setForeground(new java.awt.Color(235, 235, 235));
        clientRelatedCancelButton.setText("Go Back");
        clientRelatedCancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clientRelatedCancelButtonActionPerformed(evt);
            }
        });

        clientRelatedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientRelatedLabel.setText("Related issues for ticket #: UNDEFINED");
        clientRelatedLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout clientRelatedTicketsPanelLayout = new javax.swing.GroupLayout(clientRelatedTicketsPanel);
        clientRelatedTicketsPanel.setLayout(clientRelatedTicketsPanelLayout);
        clientRelatedTicketsPanelLayout.setHorizontalGroup(
            clientRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientRelatedTicketsPanelLayout.createSequentialGroup()
                .addGroup(clientRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientRelatedTicketsPanelLayout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(clientRelatedViewButton)
                        .addGap(139, 139, 139)
                        .addComponent(clientRelatedCancelButton))
                    .addGroup(clientRelatedTicketsPanelLayout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(clientRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clientRelatedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clientRelatedScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        clientRelatedTicketsPanelLayout.setVerticalGroup(
            clientRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientRelatedTicketsPanelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(clientRelatedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clientRelatedScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(clientRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientRelatedViewButton)
                    .addComponent(clientRelatedCancelButton))
                .addGap(22, 22, 22))
        );

        TopPane.addTab("Related Tickets", clientRelatedTicketsPanel);

        agentRelatedTicketsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        agentRelatedScrollPane.setViewportView(agentRelatedList);

        agentRelatedViewButton.setText("View");
        agentRelatedViewButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentRelatedViewButtonActionPerformed(evt);
            }
        });

        agentRelatedCancelButton.setBackground(new java.awt.Color(128, 64, 64));
        agentRelatedCancelButton.setForeground(new java.awt.Color(235, 235, 235));
        agentRelatedCancelButton.setText("Go Back");
        agentRelatedCancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentRelatedCancelButtonActionPerformed(evt);
            }
        });

        agentRelatedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        agentRelatedLabel.setText("Related issues for ticket #: UNDEFINED");
        agentRelatedLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        agentRelatedAddButton.setText("Add New");
        agentRelatedAddButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentRelatedAddButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout agentRelatedTicketsPanelLayout = new javax.swing.GroupLayout(agentRelatedTicketsPanel);
        agentRelatedTicketsPanel.setLayout(agentRelatedTicketsPanelLayout);
        agentRelatedTicketsPanelLayout.setHorizontalGroup(
            agentRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentRelatedTicketsPanelLayout.createSequentialGroup()
                .addGroup(agentRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(agentRelatedTicketsPanelLayout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(agentRelatedViewButton)
                        .addGap(38, 38, 38)
                        .addComponent(agentRelatedAddButton)
                        .addGap(28, 28, 28)
                        .addComponent(agentRelatedCancelButton))
                    .addGroup(agentRelatedTicketsPanelLayout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(agentRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(agentRelatedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(agentRelatedScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        agentRelatedTicketsPanelLayout.setVerticalGroup(
            agentRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentRelatedTicketsPanelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(agentRelatedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(agentRelatedScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(agentRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agentRelatedViewButton)
                    .addComponent(agentRelatedCancelButton)
                    .addComponent(agentRelatedAddButton))
                .addGap(22, 22, 22))
        );

        TopPane.addTab("Related Tickets", agentRelatedTicketsPanel);

        managerRelatedTicketsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        managerRelatedScrollPane.setViewportView(managerRelatedList);

        managerRelatedViewButton.setText("View");
        managerRelatedViewButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerRelatedViewButtonActionPerformed(evt);
            }
        });

        managerRelatedCancelButton.setBackground(new java.awt.Color(128, 64, 64));
        managerRelatedCancelButton.setForeground(new java.awt.Color(235, 235, 235));
        managerRelatedCancelButton.setText("Go Back");
        managerRelatedCancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerRelatedCancelButtonActionPerformed(evt);
            }
        });

        managerRelatedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        managerRelatedLabel.setText("Related issues for ticket #: UNDEFINED");
        managerRelatedLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        managerRelatedAddButton.setText("Add New");
        managerRelatedAddButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerRelatedAddButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managerRelatedTicketsPanelLayout = new javax.swing.GroupLayout(managerRelatedTicketsPanel);
        managerRelatedTicketsPanel.setLayout(managerRelatedTicketsPanelLayout);
        managerRelatedTicketsPanelLayout.setHorizontalGroup(
            managerRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerRelatedTicketsPanelLayout.createSequentialGroup()
                .addGroup(managerRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managerRelatedTicketsPanelLayout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(managerRelatedViewButton)
                        .addGap(41, 41, 41)
                        .addComponent(managerRelatedAddButton)
                        .addGap(29, 29, 29)
                        .addComponent(managerRelatedCancelButton))
                    .addGroup(managerRelatedTicketsPanelLayout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(managerRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(managerRelatedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(managerRelatedScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        managerRelatedTicketsPanelLayout.setVerticalGroup(
            managerRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerRelatedTicketsPanelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(managerRelatedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(managerRelatedScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(managerRelatedTicketsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managerRelatedViewButton)
                    .addComponent(managerRelatedCancelButton)
                    .addComponent(managerRelatedAddButton))
                .addGap(22, 22, 22))
        );

        TopPane.addTab("Related Tickets", managerRelatedTicketsPanel);

        managerViewAllPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        managerViewAllList.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        managerViewAllList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        managerViewAllScrollPane.setViewportView(managerViewAllList);

        managerViewAllLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        managerViewAllLabel.setText("View All Tickets");
        managerViewAllLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        managerViewAllViewButton.setText("View");
        managerViewAllViewButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerViewAllViewButtonActionPerformed(evt);
            }
        });

        managerViewAllCancelButton.setBackground(new java.awt.Color(128, 64, 64));
        managerViewAllCancelButton.setForeground(new java.awt.Color(235, 235, 235));
        managerViewAllCancelButton.setText("Go Back");
        managerViewAllCancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerViewAllCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managerViewAllPanelLayout = new javax.swing.GroupLayout(managerViewAllPanel);
        managerViewAllPanel.setLayout(managerViewAllPanelLayout);
        managerViewAllPanelLayout.setHorizontalGroup(
            managerViewAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerViewAllPanelLayout.createSequentialGroup()
                .addGroup(managerViewAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managerViewAllPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(managerViewAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(managerViewAllScrollPane)
                            .addComponent(managerViewAllLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)))
                    .addGroup(managerViewAllPanelLayout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(managerViewAllViewButton)
                        .addGap(159, 159, 159)
                        .addComponent(managerViewAllCancelButton)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        managerViewAllPanelLayout.setVerticalGroup(
            managerViewAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerViewAllPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(managerViewAllLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(managerViewAllScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(managerViewAllPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managerViewAllViewButton)
                    .addComponent(managerViewAllCancelButton))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        TopPane.addTab("View All", managerViewAllPanel);

        agentAgentSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        agentAgentSearchLabel.setText("ID Search");

        agentAgentSearchCheckButton.setText("Search");
        agentAgentSearchCheckButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentAgentSearchCheckButtonActionPerformed(evt);
            }
        });

        agentAgentSearchViewButton.setText("View Ticket");
        agentAgentSearchViewButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentAgentSearchViewButtonActionPerformed(evt);
            }
        });

        agentAgentSearchBackButton.setBackground(new java.awt.Color(128, 64, 64));
        agentAgentSearchBackButton.setForeground(new java.awt.Color(235, 235, 235));
        agentAgentSearchBackButton.setText("Go Back");
        agentAgentSearchBackButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                agentAgentSearchBackButtonActionPerformed(evt);
            }
        });

        agentAgentSearchScrollPane.setViewportView(agentAgentSearchList);

        javax.swing.GroupLayout agentAgentSearchPanelLayout = new javax.swing.GroupLayout(agentAgentSearchPanel);
        agentAgentSearchPanel.setLayout(agentAgentSearchPanelLayout);
        agentAgentSearchPanelLayout.setHorizontalGroup(
            agentAgentSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentAgentSearchPanelLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(agentAgentSearchViewButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(agentAgentSearchBackButton)
                .addGap(86, 86, 86))
            .addGroup(agentAgentSearchPanelLayout.createSequentialGroup()
                .addGroup(agentAgentSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, agentAgentSearchPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(agentAgentSearchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(agentAgentSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(agentAgentSearchCheckButton))
                    .addGroup(agentAgentSearchPanelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(agentAgentSearchScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        agentAgentSearchPanelLayout.setVerticalGroup(
            agentAgentSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agentAgentSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(agentAgentSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agentAgentSearchLabel)
                    .addComponent(agentAgentSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agentAgentSearchCheckButton))
                .addGap(18, 18, 18)
                .addComponent(agentAgentSearchScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(agentAgentSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agentAgentSearchViewButton)
                    .addComponent(agentAgentSearchBackButton))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        TopPane.addTab("Agent Search", agentAgentSearchPanel);

        managerAgentSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        managerAgentSearchLabel.setText("ID Search");

        managerAgentSearchCheckButton.setText("Search");
        managerAgentSearchCheckButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerAgentSearchCheckButtonActionPerformed(evt);
            }
        });

        managerAgentSearchViewButton.setText("View Ticket");
        managerAgentSearchViewButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerAgentSearchViewButtonActionPerformed(evt);
            }
        });

        managerAgentSearchBackButton.setBackground(new java.awt.Color(128, 64, 64));
        managerAgentSearchBackButton.setForeground(new java.awt.Color(235, 235, 235));
        managerAgentSearchBackButton.setText("Go Back");
        managerAgentSearchBackButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerAgentSearchBackButtonActionPerformed(evt);
            }
        });

        managerAgentSearchScrollPane.setViewportView(managerAgentSearchList);

        javax.swing.GroupLayout managerAgentSearchPanelLayout = new javax.swing.GroupLayout(managerAgentSearchPanel);
        managerAgentSearchPanel.setLayout(managerAgentSearchPanelLayout);
        managerAgentSearchPanelLayout.setHorizontalGroup(
            managerAgentSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerAgentSearchPanelLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(managerAgentSearchViewButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(managerAgentSearchBackButton)
                .addGap(86, 86, 86))
            .addGroup(managerAgentSearchPanelLayout.createSequentialGroup()
                .addGroup(managerAgentSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managerAgentSearchPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(managerAgentSearchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(managerAgentSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(managerAgentSearchCheckButton))
                    .addGroup(managerAgentSearchPanelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(managerAgentSearchScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        managerAgentSearchPanelLayout.setVerticalGroup(
            managerAgentSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerAgentSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(managerAgentSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managerAgentSearchLabel)
                    .addComponent(managerAgentSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(managerAgentSearchCheckButton))
                .addGap(18, 18, 18)
                .addComponent(managerAgentSearchScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(managerAgentSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managerAgentSearchViewButton)
                    .addComponent(managerAgentSearchBackButton))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        TopPane.addTab("Agent Search", managerAgentSearchPanel);

        managerLogsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String []
            {
                "Who", "What", "When"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        managerLogsScrollPane.setViewportView(managerLogsTable);

        managerLogsBackButton.setBackground(new java.awt.Color(128, 64, 64));
        managerLogsBackButton.setForeground(new java.awt.Color(235, 235, 235));
        managerLogsBackButton.setText("Go Back");
        managerLogsBackButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                managerLogsBackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managerLogsPanelLayout = new javax.swing.GroupLayout(managerLogsPanel);
        managerLogsPanel.setLayout(managerLogsPanelLayout);
        managerLogsPanelLayout.setHorizontalGroup(
            managerLogsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managerLogsPanelLayout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(managerLogsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addGroup(managerLogsPanelLayout.createSequentialGroup()
                .addGap(280, 280, 280)
                .addComponent(managerLogsBackButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        managerLogsPanelLayout.setVerticalGroup(
            managerLogsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerLogsPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(managerLogsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(managerLogsBackButton)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        TopPane.addTab("tab22", managerLogsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TopPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TopPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static class PriorityRenderer extends DefaultListCellRenderer{
        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            if (value.toString().split(" ")[0].equals("CLOSED:") || value.toString().split(" ")[1].equals("CLOSED:")) {
                c.setBackground(new Color(200,200,200));
            }
            else if (value.toString().split(" ")[0].equals("[LOW]")) {
                c.setBackground(new Color(153,204,255));
            }
            else if (value.toString().split(" ")[0].equals("[HIGH]")) {
                c.setBackground(new Color(255,255,204));
            }
            else if (value.toString().split(" ")[0].equals("[CRIT]")) {
                c.setBackground(new Color(255,153,153));
            }
            return c;
        }
    }
    
    private void AgentExitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AgentExitButtonActionPerformed
    {//GEN-HEADEREND:event_AgentExitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_AgentExitButtonActionPerformed

    private void ClientExitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ClientExitButtonActionPerformed
    {//GEN-HEADEREND:event_ClientExitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ClientExitButtonActionPerformed

    private void ManagerExitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ManagerExitButtonActionPerformed
    {//GEN-HEADEREND:event_ManagerExitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ManagerExitButtonActionPerformed

    private void clientTicketReturnButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clientTicketReturnButtonActionPerformed
    {//GEN-HEADEREND:event_clientTicketReturnButtonActionPerformed
        TopPane.addTab("Landing", clientLandingPanel);
        TopPane.remove(clientTicketPanel);
    }//GEN-LAST:event_clientTicketReturnButtonActionPerformed

    private void ClientTicketCreateSubmitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ClientTicketCreateSubmitButtonActionPerformed
    {//GEN-HEADEREND:event_ClientTicketCreateSubmitButtonActionPerformed
        try {
            String tickname = ClientTicketCreateName.getText();
            String tickdesc = ClientTicketCreateDesc.getText();
            
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            //Create the ticket.
            preparedStatement = con.prepareStatement("INSERT INTO tickets VALUES (default, ?, ?, 0, 0, \"\", \"\", \"\", 0, 0, sysdate(), sysdate());");
            preparedStatement.setString(1, tickname);
            preparedStatement.setString(2, tickdesc);
            preparedStatement.executeUpdate();
            
            //Retrieve the ID of the newly-created ticket.
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketname = ? AND description = ? ORDER BY ticketid DESC;");
            preparedStatement.setString(1, tickname);
            preparedStatement.setString(2, tickdesc);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            
            //Create the association between the ticket and client.
            preparedStatement = con.prepareStatement("INSERT INTO assignments VALUES (?, ?, default);");
            preparedStatement.setInt(1, id);
            preparedStatement.setInt(2, resultSet.getInt("ticketid"));
            preparedStatement.executeUpdate();
            
            JOptionPane.showMessageDialog(new JFrame(), "Ticket created successfully! Please wait for an agent to assist you.");
            
            preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
            preparedStatement.setInt(1, id);
            preparedStatement.setString(2, "ADD TICKET "+resultSet.getInt("ticketid")+" AS CLIENT");
            preparedStatement.executeUpdate();
            
            //Add ticket to personal list
            claimlist.addElement("OPEN: " + resultSet.getInt("ticketid") + " " + tickname);
            claimlist = clisort(claimlist);
            
            TopPane.add("Landing", clientLandingPanel);
            TopPane.remove(clientTicketCreatePanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, preparedStatement, con);}
    }//GEN-LAST:event_ClientTicketCreateSubmitButtonActionPerformed

    private void AgentTicketCreateSubmitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AgentTicketCreateSubmitButtonActionPerformed
    {//GEN-HEADEREND:event_AgentTicketCreateSubmitButtonActionPerformed
        try {
            String tickname = AgentTicketCreateName.getText();
            String tickdesc = AgentTicketCreateDesc.getText();
            int clientid = Integer.parseInt(AgentTicketCreateClient.getText());
            
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            //Create the ticket.
            preparedStatement = con.prepareStatement("INSERT INTO tickets VALUES (default, ?, ?, 0, 0, \"\", \"\", \"\", 0, 0, sysdate(), sysdate());");
            preparedStatement.setString(1, tickname);
            preparedStatement.setString(2, tickdesc);
            preparedStatement.executeUpdate();
            //Retrieve the ID of the newly-created ticket.
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketname = ? AND description = ? ORDER BY ticketid DESC;");
            preparedStatement.setString(1, tickname);
            preparedStatement.setString(2, tickdesc);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            //Create the association between the ticket and client.
            preparedStatement = con.prepareStatement("INSERT INTO assignments VALUES (?, ?, default)");
            preparedStatement.setInt(1, clientid);
            preparedStatement.setInt(2, resultSet.getInt("ticketid"));
            preparedStatement.executeUpdate();
            
            preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
            preparedStatement.setInt(1, id);
            preparedStatement.setString(2, "ADD TICKET "+resultSet.getInt("ticketid")+" AS AGENT");
            preparedStatement.executeUpdate();
            
            JOptionPane.showMessageDialog(new JFrame(), "Ticket created successfully!");
            
            /* WNF: Tickets added this way fall to the bottom of the list and no sort is performed.
                While this is unintended behaviour, it does make it easier to find the newly-created
                ticket, and so the bug is actually advantageous to use.*/
            
            genlist.addElement("[MED] OPEN: " + resultSet.getInt("ticketid") + " " + tickname);
            genlist = sort(genlist);
            
            TopPane.add("Landing", agentLandingPanel);
            TopPane.remove(agentTicketCreatePanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, preparedStatement, con);}
    }//GEN-LAST:event_AgentTicketCreateSubmitButtonActionPerformed

    private void ManagerTicketCreateSubmitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ManagerTicketCreateSubmitButtonActionPerformed
    {//GEN-HEADEREND:event_ManagerTicketCreateSubmitButtonActionPerformed
        try {
            String tickname = ManagerTicketCreateName.getText();
            String tickdesc = ManagerTicketCreateDesc.getText();
            int clientid = Integer.parseInt(ManagerTicketCreateClient.getText());
            
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            //Create the ticket.
            preparedStatement = con.prepareStatement("INSERT INTO tickets VALUES (default, ?, ?, 0, 0, \"\", \"\", \"\", 0, 0, sysdate(), sysdate());");
            preparedStatement.setString(1, tickname);
            preparedStatement.setString(2, tickdesc);
            preparedStatement.executeUpdate();
            //Retrieve the ID of the newly-created ticket.
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketname = ? AND description = ? ORDER BY ticketid DESC;");
            preparedStatement.setString(1, tickname);
            preparedStatement.setString(2, tickdesc);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            //Create the association between the ticket and client.
            preparedStatement = con.prepareStatement("INSERT INTO assignments VALUES (?, ?, default)");
            preparedStatement.setInt(1, clientid);
            preparedStatement.setInt(2, resultSet.getInt("ticketid"));
            preparedStatement.executeUpdate();
            
            preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
            preparedStatement.setInt(1, id);
            preparedStatement.setString(2, "ADD TICKET "+resultSet.getInt("ticketid")+" AS MANAGER");
            preparedStatement.executeUpdate();
            
            JOptionPane.showMessageDialog(new JFrame(), "Ticket created successfully!");
            
            /* WNF: Tickets added this way fall to the bottom of the list and no sort is performed.
                While this is unintended behaviour, it does make it easier to find the newly-created
                ticket, and so the bug is actually advantageous to use.*/
            genlist.addElement("[MED] OPEN: " + resultSet.getInt("ticketid") + " " + tickname);
            genlist = sort(genlist);
            
            TopPane.add("Landing", managerLandingPanel);
            TopPane.remove(managerTicketCreatePanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, preparedStatement, con);}
    }//GEN-LAST:event_ManagerTicketCreateSubmitButtonActionPerformed

    private void ClientViewTicketButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ClientViewTicketButtonActionPerformed
    {//GEN-HEADEREND:event_ClientViewTicketButtonActionPerformed
        try {
            tickid = Integer.parseInt(ClientList.getSelectedValue().split(" ")[1]);
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();

            clientTicketName.setText(" Name: " + resultSet.getString("ticketname"));
            
            clientDesc.setText(resultSet.getString("description"));
            
            switch (resultSet.getInt("status")) {
                case 0:
                    clientTicketStatus.setText(" Status: Open");
                    break;
                case 1:
                    clientTicketStatus.setText(" Status: In Progress");
                    break;
                case 2:
                    clientTicketStatus.setText(" Status: Awaiting Client");
                    break;
                default:
                    clientTicketStatus.setText(" Status: Closed");
            }
            
            clientComments.setText(resultSet.getString("comments"));
            clientTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
            clientLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
            
            TopPane.addTab("Ticket Details", clientTicketPanel);
            TopPane.remove(clientLandingPanel);
        }
        catch (Exception e) {
            System.out.println(e);
        }
        finally {close(resultSet, preparedStatement, con);}
        
    }//GEN-LAST:event_ClientViewTicketButtonActionPerformed

    private void agentTicketReturnButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentTicketReturnButtonActionPerformed
    {//GEN-HEADEREND:event_agentTicketReturnButtonActionPerformed
        TopPane.add("Landing", agentLandingPanel);
        TopPane.remove(agentTicketPanel);
    }//GEN-LAST:event_agentTicketReturnButtonActionPerformed

    private void ManagerClientViewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ManagerClientViewButtonActionPerformed
    {//GEN-HEADEREND:event_ManagerClientViewButtonActionPerformed
        //Refuse to open if the view already exists
        if (TopPane.indexOfComponent(clientLandingPanel) == -1 && TopPane.indexOfComponent(clientTicketPanel) == -1
                && TopPane.indexOfComponent(clientTicketCreatePanel) == -1)
            TopPane.add("Client Landing", clientLandingPanel);
        else
            JOptionPane.showMessageDialog(new JFrame(), "The Client view is already open!", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_ManagerClientViewButtonActionPerformed

    private void ClientTicketCreateCancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ClientTicketCreateCancelButtonActionPerformed
    {//GEN-HEADEREND:event_ClientTicketCreateCancelButtonActionPerformed
        TopPane.add("Landing", clientLandingPanel);
        TopPane.remove(clientTicketCreatePanel);
    }//GEN-LAST:event_ClientTicketCreateCancelButtonActionPerformed

    private void ManagerTagSearchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ManagerTagSearchButtonActionPerformed
    {//GEN-HEADEREND:event_ManagerTagSearchButtonActionPerformed
        TopPane.add("Tag Search", tagSearchPanel);
        TopPane.remove(managerLandingPanel);
    }//GEN-LAST:event_ManagerTagSearchButtonActionPerformed

    private void AgentTicketCreateCancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AgentTicketCreateCancelButtonActionPerformed
    {//GEN-HEADEREND:event_AgentTicketCreateCancelButtonActionPerformed
        TopPane.add("Landing", agentLandingPanel);
        TopPane.remove(agentTicketCreatePanel);
    }//GEN-LAST:event_AgentTicketCreateCancelButtonActionPerformed

    private void ManagerTicketCreateCancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ManagerTicketCreateCancelButtonActionPerformed
    {//GEN-HEADEREND:event_ManagerTicketCreateCancelButtonActionPerformed
        TopPane.add("Landing", managerLandingPanel);
        TopPane.remove(managerTicketCreatePanel);
    }//GEN-LAST:event_ManagerTicketCreateCancelButtonActionPerformed

    private void AgentGenViewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AgentGenViewButtonActionPerformed
    {//GEN-HEADEREND:event_AgentGenViewButtonActionPerformed
        try {
            tickid = Integer.parseInt(AgentGenList.getSelectedValue().split(" ")[2]);
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();

            agentClaimTicketButton.setVisible(true);
            
            agentTicketName.setText(" Name: " + resultSet.getString("ticketname"));
            agentDesc.setText(resultSet.getString("description"));
            switch (resultSet.getInt("status")) {
                case 0:
                    agentTicketStatus.setText(" Status: Open");
                    break;
                case 1:
                    agentTicketStatus.setText(" Status: In Progress");
                    break;
                case 2:
                    agentTicketStatus.setText(" Status: Awaiting Client");
                    break;
                default:
                    agentTicketStatus.setText(" Status: Closed");
            }
            switch (resultSet.getInt("priority")) {
                case 1:
                    agentTicketPriority.setBackground(new Color(153,204,255));
                    agentTicketPriority.setText(" Priority: Low");
                    break;
                case 2:
                    agentTicketPriority.setBackground(new Color(255,255,204));
                    agentTicketPriority.setText(" Priority: High");
                    break;
                case 3:
                    agentTicketPriority.setBackground(new Color(255,153,153));
                    agentTicketPriority.setText(" Priority: Critical");
                    break;
                default:
                    agentTicketPriority.setBackground(new Color(235,235,235));
                    agentTicketPriority.setText(" Priority: Medium");
            }
            switch (resultSet.getInt("timing")) {
                case 0:
                    agentTimingLabel.setText("Timing: On Time  ");
                    break;
                case 1:
                    agentTimingLabel.setText("Timing: At Risk  ");
                    break;
                case 2:
                    agentTimingLabel.setText("Timing: Late  ");
                    break;
                case 3:
                    agentTimingLabel.setText("Timing: Completed On Time  ");
                    break;
                default:
                    agentTimingLabel.setText("Timing: Completed Late  ");
            }
            agentComments.setText(resultSet.getString("comments"));
            agentNotes.setText(resultSet.getString("notes"));
            agentTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
            agentLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
            
            TopPane.addTab("Ticket Details", agentTicketPanel);
            TopPane.remove(agentLandingPanel);
        }
        catch (Exception e) {
            System.out.println(e);
        }
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_AgentGenViewButtonActionPerformed

    private void AgentClaimViewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AgentClaimViewButtonActionPerformed
    {//GEN-HEADEREND:event_AgentClaimViewButtonActionPerformed
        try {
            tickid = Integer.parseInt(AgentClaimList.getSelectedValue().split(" ")[2]);
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();

            agentClaimTicketButton.setVisible(false);
            
            agentTicketName.setText(" Name: " + resultSet.getString("ticketname"));
            agentDesc.setText(resultSet.getString("description"));
            switch (resultSet.getInt("status")) {
                case 0:
                    agentTicketStatus.setText(" Status: Open");
                    break;
                case 1:
                    agentTicketStatus.setText(" Status: In Progress");
                    break;
                case 2:
                    agentTicketStatus.setText(" Status: Awaiting Client");
                    break;
                default:
                    agentTicketStatus.setText(" Status: Closed");
            }
            switch (resultSet.getInt("priority")) {
                case 1:
                    agentTicketPriority.setBackground(new Color(153,204,255));
                    agentTicketPriority.setText(" Priority: Low");
                    break;
                case 2:
                    agentTicketPriority.setBackground(new Color(255,255,204));
                    agentTicketPriority.setText(" Priority: High");
                    break;
                case 3:
                    agentTicketPriority.setBackground(new Color(255,153,153));
                    agentTicketPriority.setText(" Priority: Critical");
                    break;
                default:
                    agentTicketPriority.setBackground(new Color(235,235,235));
                    agentTicketPriority.setText(" Priority: Medium");
            }
            switch (resultSet.getInt("timing")) {
                case 0:
                    agentTimingLabel.setText("Timing: On Time  ");
                    break;
                case 1:
                    agentTimingLabel.setText("Timing: At Risk  ");
                    break;
                case 2:
                    agentTimingLabel.setText("Timing: Late  ");
                    break;
                case 3:
                    agentTimingLabel.setText("Timing: Completed On Time  ");
                    break;
                default:
                    agentTimingLabel.setText("Timing: Completed Late  ");
            }
            agentComments.setText(resultSet.getString("comments"));
            agentNotes.setText(resultSet.getString("notes"));
            agentTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
            agentLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
            
            TopPane.addTab("Ticket Details", agentTicketPanel);
            TopPane.remove(agentLandingPanel);
        }
        catch (Exception e) {
            System.out.println(e);
        }
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_AgentClaimViewButtonActionPerformed

    private void ManagerGenViewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ManagerGenViewButtonActionPerformed
    {//GEN-HEADEREND:event_ManagerGenViewButtonActionPerformed
        try {
            tickid = Integer.parseInt(ManagerGenList.getSelectedValue().split(" ")[2]);
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();

            managerAssignTicketButton.setVisible(true);
            
            managerTicketName.setText(" Name: " + resultSet.getString("ticketname"));
            managerDesc.setText(resultSet.getString("description"));
            switch (resultSet.getInt("status")) {
                case 0:
                    managerTicketStatus.setText(" Status: Open");
                    break;
                case 1:
                    managerTicketStatus.setText(" Status: In Progress");
                    break;
                case 2:
                    managerTicketStatus.setText(" Status: Awaiting Client");
                    break;
                default:
                    managerTicketStatus.setText(" Status: Closed");
            }
            switch (resultSet.getInt("priority")) {
                case 1:
                    managerTicketPriority.setBackground(new Color(153,204,255));
                    managerTicketPriority.setText(" Priority: Low");
                    break;
                case 2:
                    managerTicketPriority.setBackground(new Color(255,255,204));
                    managerTicketPriority.setText(" Priority: High");
                    break;
                case 3:
                    managerTicketPriority.setBackground(new Color(255,153,153));
                    managerTicketPriority.setText(" Priority: Critical");
                    break;
                default:
                    managerTicketPriority.setBackground(new Color(235,235,235));
                    managerTicketPriority.setText(" Priority: Medium");
            }
            switch (resultSet.getInt("timing")) {
                case 0:
                    managerTimingLabel.setText("Timing: On Time  ");
                    break;
                case 1:
                    managerTimingLabel.setText("Timing: At Risk  ");
                    break;
                case 2:
                    managerTimingLabel.setText("Timing: Late  ");
                    break;
                case 3:
                    managerTimingLabel.setText("Timing: Completed On Time  ");
                    break;
                default:
                    managerTimingLabel.setText("Timing: Completed Late  ");
            }
            managerComments.setText(resultSet.getString("comments"));
            managerNotes.setText(resultSet.getString("notes"));
            managerTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
            managerLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
            
            TopPane.addTab("Ticket Details", managerTicketPanel);
            TopPane.remove(managerLandingPanel);
        }
        catch (Exception e) {
            System.out.println(e);
        }
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_ManagerGenViewButtonActionPerformed

    private void ManagerClaimViewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ManagerClaimViewButtonActionPerformed
    {//GEN-HEADEREND:event_ManagerClaimViewButtonActionPerformed
        try {
            tickid = Integer.parseInt(ManagerClaimList.getSelectedValue().split(" ")[2]);
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();

            managerAssignTicketButton.setVisible(true);
            
            managerTicketName.setText(" Name: " + resultSet.getString("ticketname"));
            managerDesc.setText(resultSet.getString("description"));
            switch (resultSet.getInt("status")) {
                case 0:
                    managerTicketStatus.setText(" Status: Open");
                    break;
                case 1:
                    managerTicketStatus.setText(" Status: In Progress");
                    break;
                case 2:
                    managerTicketStatus.setText(" Status: Awaiting Client");
                    break;
                default:
                    managerTicketStatus.setText(" Status: Closed");
            }
            switch (resultSet.getInt("priority")) {
                case 1:
                    managerTicketPriority.setBackground(new Color(153,204,255));
                    managerTicketPriority.setText(" Priority: Low");
                    break;
                case 2:
                    managerTicketPriority.setBackground(new Color(255,255,204));
                    managerTicketPriority.setText(" Priority: High");
                    break;
                case 3:
                    managerTicketPriority.setBackground(new Color(255,153,153));
                    managerTicketPriority.setText(" Priority: Critical");
                    break;
                default:
                    managerTicketPriority.setBackground(new Color(235,235,235));
                    managerTicketPriority.setText(" Priority: Medium");
            }
            switch (resultSet.getInt("timing")) {
                case 0:
                    managerTimingLabel.setText("Timing: On Time  ");
                    break;
                case 1:
                    managerTimingLabel.setText("Timing: At Risk  ");
                    break;
                case 2:
                    managerTimingLabel.setText("Timing: Late  ");
                    break;
                case 3:
                    managerTimingLabel.setText("Timing: Completed On Time  ");
                    break;
                default:
                    managerTimingLabel.setText("Timing: Completed Late  ");
            }
            managerComments.setText(resultSet.getString("comments"));
            managerNotes.setText(resultSet.getString("notes"));
            managerTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
            managerLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
            
            TopPane.addTab("Ticket Details", managerTicketPanel);
            TopPane.remove(managerLandingPanel);
        }
        catch (Exception e) {
            System.out.println(e);
        }
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_ManagerClaimViewButtonActionPerformed

    private void agentClaimTicketButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentClaimTicketButtonActionPerformed
    {//GEN-HEADEREND:event_agentClaimTicketButtonActionPerformed
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);

            preparedStatement = con.prepareStatement
                ("UPDATE tickets SET assigned = 1 WHERE ticketid = ?;");
            preparedStatement.setInt(1, tickid);
            preparedStatement.executeUpdate();
            preparedStatement.close();
            preparedStatement = con.prepareStatement("INSERT INTO assignments (assocuser, assocticket, delkey) VALUES (?, ?, default);");
            preparedStatement.setInt(1, id);
            preparedStatement.setInt(2, tickid);
            preparedStatement.executeUpdate();
            
            preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
            preparedStatement.setInt(1, id);
            preparedStatement.setString(2, "AGENT CLAIMED TICKET "+tickid);
            preparedStatement.executeUpdate();
            
            preparedStatement.close();
            
            //Populate user-specific lists
            preparedStatement = con.prepareStatement("SELECT * FROM tickets INNER JOIN assignments ON tickets.ticketid = assignments.assocticket WHERE assocuser = ?");
            preparedStatement.setInt(1, id);
            ResultSet ticketList = preparedStatement.executeQuery();
            DefaultListModel listModel = new DefaultListModel();
            while (ticketList.next()) {
                //priority tags
                String priocode;
                switch (ticketList.getInt("priority")) {
                    case 1:
                        priocode = "[LOW] ";
                        break;
                    case 2:
                        priocode = "[HIGH] ";
                        break;
                    case 3:
                        priocode = "[CRIT] ";
                        break;
                    default:
                        priocode = "[MEDIUM] ";
                }
                //status tags
                switch (ticketList.getInt("status")) {
                    case 0:
                        listModel.addElement(priocode + "OPEN: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    case 1:
                        listModel.addElement(priocode + "WORKING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    case 2:
                        listModel.addElement(priocode + "WAITING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    default:
                        //Closed: Don't put this in agent lists
                }
            }
            listModel = sort(listModel);
            AgentClaimList.setModel(listModel);
            statement = con.createStatement();
            ticketList = statement.executeQuery("SELECT * FROM tickets WHERE assigned = 0");
            listModel = new DefaultListModel();
            while (ticketList.next()) {
                //priority tags
                String priocode;
                switch (ticketList.getInt("priority")) {
                    case 1:
                        priocode = "[LOW] ";
                        break;
                    case 2:
                        priocode = "[HIGH] ";
                        break;
                    case 3:
                        priocode = "[CRIT] ";
                        break;
                    default:
                        priocode = "[MEDIUM] ";
                }
                //status tags
                switch (ticketList.getInt("status")) {
                    case 0:
                        listModel.addElement(priocode + "OPEN: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    case 1:
                        listModel.addElement(priocode + "WORKING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    case 2:
                        listModel.addElement(priocode + "WAITING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    default:
                        //Closed: Don't put this in agent lists
                }
            }
            listModel = sort(listModel);
            AgentGenList.setModel(listModel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, preparedStatement, con);}
    }//GEN-LAST:event_agentClaimTicketButtonActionPerformed

    private void tagSearchBackButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tagSearchBackButtonActionPerformed
    {//GEN-HEADEREND:event_tagSearchBackButtonActionPerformed
        TopPane.addTab("Landing", managerLandingPanel);
        TopPane.remove(tagSearchPanel);
    }//GEN-LAST:event_tagSearchBackButtonActionPerformed

    private void agentTagListButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentTagListButtonActionPerformed
    {//GEN-HEADEREND:event_agentTagListButtonActionPerformed
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT tags FROM tickets WHERE ticketid = ?;");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            
            String taglist = resultSet.getString("tags");
            agentTagListText.setText(taglist);
            agentTagListTitle.setText("Tags for ticket #: " + tickid);
            
            TopPane.addTab("Tags", agentTagListPanel);
            TopPane.remove(agentTicketPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, preparedStatement, con);}
    }//GEN-LAST:event_agentTagListButtonActionPerformed

    private void agentTagListCancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentTagListCancelButtonActionPerformed
    {//GEN-HEADEREND:event_agentTagListCancelButtonActionPerformed
        TopPane.addTab("Ticket Details", agentTicketPanel);
        TopPane.remove(agentTagListPanel);
    }//GEN-LAST:event_agentTagListCancelButtonActionPerformed

    private void ClientNewTicketButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ClientNewTicketButtonActionPerformed
    {//GEN-HEADEREND:event_ClientNewTicketButtonActionPerformed
        TopPane.addTab("New Ticket", clientTicketCreatePanel);
        TopPane.remove(clientLandingPanel);
    }//GEN-LAST:event_ClientNewTicketButtonActionPerformed

    private void AgentNewTicketButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AgentNewTicketButtonActionPerformed
    {//GEN-HEADEREND:event_AgentNewTicketButtonActionPerformed
        TopPane.addTab("New Ticket", agentTicketCreatePanel);
        TopPane.remove(agentLandingPanel);
    }//GEN-LAST:event_AgentNewTicketButtonActionPerformed

    private void ManagerNewTicketButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ManagerNewTicketButtonActionPerformed
    {//GEN-HEADEREND:event_ManagerNewTicketButtonActionPerformed
        TopPane.addTab("New Ticket", managerTicketCreatePanel);
        TopPane.remove(managerLandingPanel);
    }//GEN-LAST:event_ManagerNewTicketButtonActionPerformed

    private void clientCloseTicketButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clientCloseTicketButtonActionPerformed
    {//GEN-HEADEREND:event_clientCloseTicketButtonActionPerformed
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);

            preparedStatement = con.prepareStatement
                ("UPDATE tickets SET status = 3 WHERE ticketid = ?;");
            preparedStatement.setInt(1, tickid);
            preparedStatement.executeUpdate();
            
            preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
            preparedStatement.setInt(1, id);
            preparedStatement.setString(2, "CLIENT CLOSED TICKET "+tickid);
            preparedStatement.executeUpdate();

            JOptionPane.showMessageDialog(new JFrame(), "Ticket has been closed.");
            
            /*While manager and agent changes of ticket status to Closed also affect the timing tag,
                I have elected to disclude it from the client version, as it doesn't seem particularly
                relevant to internal staff metrics when a client closes their own ticket.*/
            
            //Redraw the LIST
            preparedStatement = con.prepareStatement("SELECT * FROM tickets INNER JOIN assignments ON tickets.ticketid = assignments.assocticket WHERE assocuser = ?");
            preparedStatement.setInt(1, id);
            ResultSet ticketList = preparedStatement.executeQuery();
            claimlist = new DefaultListModel();
                        
            while (ticketList.next())
            {
                switch (ticketList.getInt("status"))
                {
                    case 0:
                        claimlist.addElement("OPEN: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    case 1:
                        claimlist.addElement("WORKING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    case 2:
                        claimlist.addElement("WAITING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    default:
                        claimlist.addElement("CLOSED: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                }
            }
            claimlist = clisort(claimlist);
            ClientList.setModel(claimlist);
            
            TopPane.add("Landing", clientLandingPanel);
            TopPane.remove(clientTicketPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null,preparedStatement,con);}
    }//GEN-LAST:event_clientCloseTicketButtonActionPerformed

    private void clientAddCommentsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clientAddCommentsButtonActionPerformed
    {//GEN-HEADEREND:event_clientAddCommentsButtonActionPerformed
        String newcomm = JOptionPane.showInputDialog(new JFrame(), "Enter your comment here:");
        if (newcomm != null) {
            java.util.Date time = new java.util.Date(System.currentTimeMillis());
            newcomm = clientComments.getText() + "[" + new SimpleDateFormat("HH:mm:ss").format(time) + "] " + "C" + id + ": " + newcomm + "\n";
            
            try {
                String url = "jdbc:mysql://localhost:3306/sys";
                String dbuser = "java";
                String dbpass = "javapass";
                con = DriverManager.getConnection(url, dbuser, dbpass);

                preparedStatement = con.prepareStatement
                    ("UPDATE tickets SET comments = ? WHERE ticketid = ?;");
                preparedStatement.setString(1, newcomm);
                preparedStatement.setInt(2, tickid);
                preparedStatement.executeUpdate();
                
                clientComments.setText(newcomm);
            }
            catch (Exception e) {System.out.println(e);}
            finally {close(null,preparedStatement,con);}
        }
    }//GEN-LAST:event_clientAddCommentsButtonActionPerformed

    private void agentAddCommentsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentAddCommentsButtonActionPerformed
    {//GEN-HEADEREND:event_agentAddCommentsButtonActionPerformed
        String newcomm = JOptionPane.showInputDialog(new JFrame(), "Enter your comment here:");
        if (newcomm != null) {
            java.util.Date time = new java.util.Date(System.currentTimeMillis());
            newcomm = agentComments.getText() + "[" + new SimpleDateFormat("HH:mm:ss").format(time) + "] " + "A" + id + ": " + newcomm + "\n";
            
            try {
                String url = "jdbc:mysql://localhost:3306/sys";
                String dbuser = "java";
                String dbpass = "javapass";
                con = DriverManager.getConnection(url, dbuser, dbpass);

                preparedStatement = con.prepareStatement
                    ("UPDATE tickets SET comments = ? WHERE ticketid = ?;");
                preparedStatement.setString(1, newcomm);
                preparedStatement.setInt(2, tickid);
                preparedStatement.executeUpdate();
                
                agentComments.setText(newcomm);
            }
            catch (Exception e) {System.out.println(e);}
            finally {close(null,preparedStatement,con);}
        }
    }//GEN-LAST:event_agentAddCommentsButtonActionPerformed

    private void agentAddNotesButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentAddNotesButtonActionPerformed
    {//GEN-HEADEREND:event_agentAddNotesButtonActionPerformed
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT notes FROM tickets WHERE ticketid = ?;");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            String ticknotes = resultSet.getString("notes");
            
            agentNotesText.setText(ticknotes);
            agentNotesTitle.setText("Tags for ticket #: " + tickid);
        
            TopPane.add("Notes", agentNotesPanel);
            TopPane.remove(agentTicketPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, preparedStatement, con);}
    }//GEN-LAST:event_agentAddNotesButtonActionPerformed

    private void agentChstatTicketButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentChstatTicketButtonActionPerformed
    {//GEN-HEADEREND:event_agentChstatTicketButtonActionPerformed
        String[] selVals = {"Open", "Working", "Awaiting Client", "Closed"};
        Object sel = JOptionPane.showInputDialog(new JFrame(), "What would you like to set the status to?", "Change Status", JOptionPane.QUESTION_MESSAGE, null, selVals, "Open");
        
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);

            preparedStatement = con.prepareStatement
                ("UPDATE tickets SET status = ? WHERE ticketid = ?;");
            preparedStatement.setInt(2, tickid);
            if (sel.equals("Open")){
                preparedStatement.setInt(1, 0);
                agentTicketStatus.setText(" Status: Open");
                preparedStatement.executeUpdate();
                
                preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatement.setInt(1, id);
                preparedStatement.setString(2, "AGENT SET STATUS 0 ON TICKET "+tickid);
                preparedStatement.executeUpdate();
            }
            else if (sel.equals("Working")){
                preparedStatement.setInt(1, 1);
                agentTicketStatus.setText(" Status: Working");
                preparedStatement.executeUpdate();
                
                preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatement.setInt(1, id);
                preparedStatement.setString(2, "AGENT SET STATUS 1 ON TICKET "+tickid);
                preparedStatement.executeUpdate();
            }
            else if (sel.equals("Awaiting Client")) {
                preparedStatement.setInt(1, 2);
                agentTicketStatus.setText(" Status: Awaiting Client");
                preparedStatement.executeUpdate();
                
                preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatement.setInt(1, id);
                preparedStatement.setString(2, "AGENT SET STATUS 2 ON TICKET "+tickid);
                preparedStatement.executeUpdate();
            }
            else if (sel.equals("Closed")) {
                preparedStatement.setInt(1, 3);
                agentTicketStatus.setText(" Status: Closed");
                preparedStatement.executeUpdate();
                
                preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatement.setInt(1, id);
                preparedStatement.setString(2, "AGENT SET STATUS 3 ON TICKET "+tickid);
                preparedStatement.executeUpdate();
                
                String currentState = agentTimingLabel.getText().split(" ")[1];
                if (currentState.equals("Late")) {
                    agentTimingLabel.setText("Timing: Completed Late  ");
                    preparedStatement = con.prepareStatement("UPDATE tickets SET timing = 4 WHERE ticketid = ?");
                    preparedStatement.setInt(1, tickid);
                    preparedStatement.executeUpdate();
                }
                else if (currentState.equals("On") || currentState.equals("At")) {
                    agentTimingLabel.setText("Timing: Completed On Time  ");
                    preparedStatement = con.prepareStatement("UPDATE tickets SET timing = 3 WHERE ticketid = ?");
                    preparedStatement.setInt(1, tickid);
                    preparedStatement.executeUpdate();
                }
            }
            
            preparedStatement = con.prepareStatement("SELECT * FROM tickets INNER JOIN assignments ON tickets.ticketid = assignments.assocticket WHERE assocuser = ?");
            preparedStatement.setInt(1, id);
            ResultSet ticketList = preparedStatement.executeQuery();
            claimlist = new DefaultListModel();
            String prioCode;

            while (ticketList.next())
            {
                switch (ticketList.getInt("priority"))
                {
                    case 1:
                        prioCode = "[LOW] ";
                        break;
                    case 2:
                        prioCode = "[HIGH] ";
                        break;
                    case 3:
                        prioCode = "[CRIT] ";
                        break;
                    default:
                        prioCode = "[MED] ";
                }
                switch (ticketList.getInt("status"))
                {
                    case 0:
                        claimlist.addElement(prioCode + "OPEN: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    case 1:
                        claimlist.addElement(prioCode + "WORKING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    case 2:
                        claimlist.addElement(prioCode + "WAITING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    default:
                        claimlist.addElement(prioCode + "CLOSED: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                }
            }
            claimlist = sort(claimlist);
            AgentClaimList.setModel(claimlist);

            statement = con.createStatement();
            ticketList = statement.executeQuery("SELECT * FROM tickets WHERE assigned = 0");
            genlist = new DefaultListModel();
            while (ticketList.next())
            {
                switch (ticketList.getInt("priority"))
                {
                    case 1:
                        prioCode = "[LOW] ";
                        break;
                    case 2:
                        prioCode = "[HIGH] ";
                        break;
                    case 3:
                        prioCode = "[CRIT] ";
                        break;
                    default:
                        prioCode = "[MED] ";
                }
                switch (ticketList.getInt("status"))
                {
                    case 0:
                        genlist.addElement(prioCode + "OPEN: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    case 1:
                        genlist.addElement(prioCode + "WORKING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    case 2:
                        genlist.addElement(prioCode + "WAITING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        break;
                    default:
                        genlist.addElement(prioCode + "CLOSED: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                }
            }
            genlist = sort(genlist);
            AgentGenList.setModel(genlist);
            statement.close();
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null,preparedStatement,con);}
    }//GEN-LAST:event_agentChstatTicketButtonActionPerformed

    private void agentNotesCancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentNotesCancelButtonActionPerformed
    {//GEN-HEADEREND:event_agentNotesCancelButtonActionPerformed
        TopPane.add("Ticket Details", agentTicketPanel);
        TopPane.remove(agentNotesPanel);
    }//GEN-LAST:event_agentNotesCancelButtonActionPerformed

    private void managerNotesCancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerNotesCancelButtonActionPerformed
    {//GEN-HEADEREND:event_managerNotesCancelButtonActionPerformed
        TopPane.add("Ticket Details", managerTicketPanel);
        TopPane.remove(managerNotesPanel);
    }//GEN-LAST:event_managerNotesCancelButtonActionPerformed

    private void agentNotesSaveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentNotesSaveButtonActionPerformed
    {//GEN-HEADEREND:event_agentNotesSaveButtonActionPerformed
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("UPDATE tickets SET notes = ? WHERE ticketid = ?;");
            preparedStatement.setInt(2, tickid);
            preparedStatement.setString(1, agentNotesText.getText());
            preparedStatement.executeUpdate();
            
            agentNotes.setText(agentNotesText.getText());
            
            TopPane.addTab("Ticket Details", agentTicketPanel);
            TopPane.remove(agentNotesPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, preparedStatement, con);}
    }//GEN-LAST:event_agentNotesSaveButtonActionPerformed

    private void managerNotesSaveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerNotesSaveButtonActionPerformed
    {//GEN-HEADEREND:event_managerNotesSaveButtonActionPerformed
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("UPDATE tickets SET notes = ? WHERE ticketid = ?;");
            preparedStatement.setInt(2, tickid);
            preparedStatement.setString(1, managerNotesText.getText());
            preparedStatement.executeUpdate();
            
            managerNotes.setText(managerNotesText.getText());
            
            TopPane.addTab("Ticket Details", managerTicketPanel);
            TopPane.remove(managerNotesPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, preparedStatement, con);}
    }//GEN-LAST:event_managerNotesSaveButtonActionPerformed

    private void agentTagListSaveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentTagListSaveButtonActionPerformed
    {//GEN-HEADEREND:event_agentTagListSaveButtonActionPerformed
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("UPDATE tickets SET tags = ? WHERE ticketid = ?;");
            preparedStatement.setInt(2, tickid);
            preparedStatement.setString(1, agentTagListText.getText());
            preparedStatement.executeUpdate();
            
            preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
            preparedStatement.setInt(1, id);
            preparedStatement.setString(2, "AGENT UPDATE TAGS ON TICKET "+tickid);
            preparedStatement.executeUpdate();
            
            TopPane.addTab("Ticket Details", agentTicketPanel);
            TopPane.remove(agentTagListPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, preparedStatement, con);}
    }//GEN-LAST:event_agentTagListSaveButtonActionPerformed

    private void managerTagListSaveButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerTagListSaveButtonActionPerformed
    {//GEN-HEADEREND:event_managerTagListSaveButtonActionPerformed
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("UPDATE tickets SET tags = ? WHERE ticketid = ?;");
            preparedStatement.setInt(2, tickid);
            preparedStatement.setString(1, managerTagListText.getText());
            preparedStatement.executeUpdate();
            
            preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
            preparedStatement.setInt(1, id);
            preparedStatement.setString(2, "MANAGER UPDATE TAGS ON TICKET "+tickid);
            preparedStatement.executeUpdate();
            
            TopPane.addTab("Ticket Details", managerTicketPanel);
            TopPane.remove(managerTagListPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, preparedStatement, con);}
    }//GEN-LAST:event_managerTagListSaveButtonActionPerformed

    private void tagSearchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tagSearchButtonActionPerformed
    {//GEN-HEADEREND:event_tagSearchButtonActionPerformed
        try {
            String query = tagSearchBar.getText();
            
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            statement = con.createStatement();
            resultSet = statement.executeQuery("SELECT * FROM tickets WHERE tags != \"\";");
            String[] tagslist;
            DefaultListModel listModel = new DefaultListModel();
            while (resultSet.next()) {
                tagslist = resultSet.getString("tags").split(", ");
                for (int i = 0; i < tagslist.length; i++) {
                    if (tagslist[i].equals(query)) {
                        //Add to list when match found
                        if (resultSet.getInt("status") == 0) {
                            listModel.addElement("OPEN: " + resultSet.getInt("ticketid") + " " + resultSet.getString("ticketname"));
                        }
                        else if (resultSet.getInt("status") == 1) {
                            listModel.addElement("WORKING: " + resultSet.getInt("ticketid") + " " + resultSet.getString("ticketname"));
                        }
                        else if (resultSet.getInt("status") == 2) {
                            listModel.addElement("WAITING: " + resultSet.getInt("ticketid") + " " + resultSet.getString("ticketname"));
                        }
                        else {
                            listModel.addElement("CLOSED: " + resultSet.getInt("ticketid") + " " + resultSet.getString("ticketname"));
                        }
                        break;
                    }
                }
            }
            listModel = clisort(listModel);
            tagSearchList.setModel(listModel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, statement, con);}
    }//GEN-LAST:event_tagSearchButtonActionPerformed

    private void tagSearchViewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tagSearchViewButtonActionPerformed
    {//GEN-HEADEREND:event_tagSearchViewButtonActionPerformed
        try {
            tickid = Integer.parseInt(tagSearchList.getSelectedValue().split(" ")[0]);
            
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();

            managerTicketName.setText(" Name: " + resultSet.getString("ticketname"));
            managerDesc.setText(resultSet.getString("description"));
            
            switch (resultSet.getInt("status")) {
                case 0:
                    managerTicketStatus.setText(" Status: Open");
                    break;
                case 1:
                    managerTicketStatus.setText(" Status: In Progress");
                    break;
                case 2:
                    managerTicketStatus.setText(" Status: Awaiting Client");
                    break;
                default:
                    managerTicketStatus.setText(" Status: Closed");
            }
            switch (resultSet.getInt("priority")) {
                case 1:
                    managerTicketPriority.setBackground(new Color(153,204,255));
                    managerTicketPriority.setText(" Priority: Low");
                    break;
                case 2:
                    managerTicketPriority.setBackground(new Color(255,255,204));
                    managerTicketPriority.setText(" Priority: High");
                    break;
                case 3:
                    managerTicketPriority.setBackground(new Color(255,153,153));
                    managerTicketPriority.setText(" Priority: Critical");
                    break;
                default:
                    managerTicketPriority.setBackground(new Color(235,235,235));
                    managerTicketPriority.setText(" Priority: Medium");
            }
            switch (resultSet.getInt("timing")) {
                case 0:
                    managerTimingLabel.setText("Timing: On Time  ");
                    break;
                case 1:
                    managerTimingLabel.setText("Timing: At Risk  ");
                    break;
                case 2:
                    managerTimingLabel.setText("Timing: Late  ");
                    break;
                case 3:
                    managerTimingLabel.setText("Timing: Completed On Time  ");
                    break;
                default:
                    managerTimingLabel.setText("Timing: Completed Late  ");
            }
            
            managerComments.setText(resultSet.getString("comments"));
            managerNotes.setText(resultSet.getString("notes"));
            managerTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
            managerLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
            
            TopPane.addTab("Ticket Details", managerTicketPanel);
            TopPane.remove(tagSearchPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {}
    }//GEN-LAST:event_tagSearchViewButtonActionPerformed

    private void clientRelatedTicketsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clientRelatedTicketsButtonActionPerformed
    {//GEN-HEADEREND:event_clientRelatedTicketsButtonActionPerformed
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM relateds INNER JOIN tickets ON ticketid = relticket WHERE thisticket = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            
            clientRelatedLabel.setText("Related issues for ticket #: " + tickid);
            DefaultListModel ticklist = new DefaultListModel();
            while (resultSet.next()) {
                ticklist.addElement(resultSet.getInt("ticketid") + " " + resultSet.getString("ticketname"));
            }
            clientRelatedList.setModel(ticklist);
            
            TopPane.add("Related Tickets", clientRelatedTicketsPanel);
            TopPane.remove(clientTicketPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_clientRelatedTicketsButtonActionPerformed

    private void agentRelatedTicketsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentRelatedTicketsButtonActionPerformed
    {//GEN-HEADEREND:event_agentRelatedTicketsButtonActionPerformed
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM relateds INNER JOIN tickets ON ticketid = relticket WHERE thisticket = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            
            //Set list and label here
            agentRelatedLabel.setText("Related issues for ticket #: " + tickid);
            DefaultListModel ticklist = new DefaultListModel();
            while (resultSet.next()) {
                ticklist.addElement(resultSet.getInt("ticketid") + " " + resultSet.getString("ticketname"));
            }
            agentRelatedList.setModel(ticklist);
            
            TopPane.add("Related Tickets", agentRelatedTicketsPanel);
            TopPane.remove(agentTicketPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_agentRelatedTicketsButtonActionPerformed

    private void clientRelatedCancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clientRelatedCancelButtonActionPerformed
    {//GEN-HEADEREND:event_clientRelatedCancelButtonActionPerformed
        TopPane.add("Ticket Details", clientTicketPanel);
        TopPane.remove(clientRelatedTicketsPanel);
    }//GEN-LAST:event_clientRelatedCancelButtonActionPerformed

    private void agentRelatedCancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentRelatedCancelButtonActionPerformed
    {//GEN-HEADEREND:event_agentRelatedCancelButtonActionPerformed
        TopPane.add("Ticket Details", agentTicketPanel);
        TopPane.remove(agentRelatedTicketsPanel);
    }//GEN-LAST:event_agentRelatedCancelButtonActionPerformed

    private void managerRelatedCancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerRelatedCancelButtonActionPerformed
    {//GEN-HEADEREND:event_managerRelatedCancelButtonActionPerformed
        TopPane.add("Ticket Details", managerTicketPanel);
        TopPane.remove(managerRelatedTicketsPanel);
    }//GEN-LAST:event_managerRelatedCancelButtonActionPerformed

    private void clientRelatedViewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clientRelatedViewButtonActionPerformed
    {//GEN-HEADEREND:event_clientRelatedViewButtonActionPerformed
        try {
            int newtickid = Integer.parseInt(clientRelatedList.getSelectedValue().split(" ")[0]);
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?;");
            preparedStatement.setInt(1, newtickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            
            clientTicketName.setText(" Name: " + resultSet.getString("ticketname"));
            clientDesc.setText(resultSet.getString("description"));
            switch (resultSet.getInt("status")) {
                case 0:
                    clientTicketStatus.setText(" Status: Open");
                    break;
                case 1:
                    clientTicketStatus.setText(" Status: In Progress");
                    break;
                case 2:
                    clientTicketStatus.setText(" Status: Awaiting Client");
                    break;
                default:
                    clientTicketStatus.setText(" Status: Closed");
            }
            clientComments.setText(resultSet.getString("comments"));
            clientTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
            clientLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
            
            tickid = newtickid;
            TopPane.add("Ticket Details", clientTicketPanel);
            TopPane.remove(clientRelatedTicketsPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_clientRelatedViewButtonActionPerformed

    private void agentRelatedViewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentRelatedViewButtonActionPerformed
    {//GEN-HEADEREND:event_agentRelatedViewButtonActionPerformed
        try {
            int newtickid = Integer.parseInt(agentRelatedList.getSelectedValue().split(" ")[0]);
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?;");
            preparedStatement.setInt(1, newtickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            
            if (resultSet.getInt("assigned") == 0) agentClaimTicketButton.setVisible(true);
            else agentClaimTicketButton.setVisible(false);
            
            agentTicketName.setText(" Name: " + resultSet.getString("ticketname"));
            agentDesc.setText(resultSet.getString("description"));
            switch (resultSet.getInt("status")) {
                case 0:
                    agentTicketStatus.setText(" Status: Open");
                    break;
                case 1:
                    agentTicketStatus.setText(" Status: In Progress");
                    break;
                case 2:
                    agentTicketStatus.setText(" Status: Awaiting Client");
                    break;
                default:
                    agentTicketStatus.setText(" Status: Closed");
            }
            switch (resultSet.getInt("priority")) {
                case 1:
                    agentTicketPriority.setBackground(new Color(153,204,255));
                    agentTicketPriority.setText(" Priority: Low");
                    break;
                case 2:
                    agentTicketPriority.setBackground(new Color(255,255,204));
                    agentTicketPriority.setText(" Priority: High");
                    break;
                case 3:
                    agentTicketPriority.setBackground(new Color(255,153,153));
                    agentTicketPriority.setText(" Priority: Critical");
                    break;
                default:
                    agentTicketPriority.setBackground(new Color(235,235,235));
                    agentTicketPriority.setText(" Priority: Medium");
            }
            switch (resultSet.getInt("timing")) {
                case 0:
                    agentTimingLabel.setText("Timing: On Time  ");
                    break;
                case 1:
                    agentTimingLabel.setText("Timing: At Risk  ");
                    break;
                case 2:
                    agentTimingLabel.setText("Timing: Late  ");
                    break;
                case 3:
                    agentTimingLabel.setText("Timing: Completed On Time  ");
                    break;
                default:
                    agentTimingLabel.setText("Timing: Completed Late  ");
            }
            agentComments.setText(resultSet.getString("comments"));
            agentNotes.setText(resultSet.getString("notes"));
            agentTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
            agentLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
            
            tickid = newtickid;
            TopPane.add("Ticket Details", agentTicketPanel);
            TopPane.remove(agentRelatedTicketsPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_agentRelatedViewButtonActionPerformed

    private void managerRelatedViewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerRelatedViewButtonActionPerformed
    {//GEN-HEADEREND:event_managerRelatedViewButtonActionPerformed
        try {
            int newtickid = Integer.parseInt(managerRelatedList.getSelectedValue().split(" ")[0]);
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?;");
            preparedStatement.setInt(1, newtickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            
            managerTicketName.setText(" Name: " + resultSet.getString("ticketname"));
            managerDesc.setText(resultSet.getString("description"));
            switch (resultSet.getInt("status")) {
                case 0:
                    managerTicketStatus.setText(" Status: Open");
                    break;
                case 1:
                    managerTicketStatus.setText(" Status: In Progress");
                    break;
                case 2:
                    managerTicketStatus.setText(" Status: Awaiting Client");
                    break;
                default:
                    managerTicketStatus.setText(" Status: Closed");
            }
            switch (resultSet.getInt("priority")) {
                case 1:
                    managerTicketPriority.setBackground(new Color(153,204,255));
                    managerTicketPriority.setText(" Priority: Low");
                    break;
                case 2:
                    managerTicketPriority.setBackground(new Color(255,255,204));
                    managerTicketPriority.setText(" Priority: High");
                    break;
                case 3:
                    managerTicketPriority.setBackground(new Color(255,153,153));
                    managerTicketPriority.setText(" Priority: Critical");
                    break;
                default:
                    managerTicketPriority.setBackground(new Color(235,235,235));
                    managerTicketPriority.setText(" Priority: Medium");
            }
            switch (resultSet.getInt("timing")) {
                case 0:
                    managerTimingLabel.setText("Timing: On Time  ");
                    break;
                case 1:
                    managerTimingLabel.setText("Timing: At Risk  ");
                    break;
                case 2:
                    managerTimingLabel.setText("Timing: Late  ");
                    break;
                case 3:
                    managerTimingLabel.setText("Timing: Completed On Time  ");
                    break;
                default:
                    managerTimingLabel.setText("Timing: Completed Late  ");
            }
            managerComments.setText(resultSet.getString("comments"));
            managerNotes.setText(resultSet.getString("notes"));
            managerTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
            managerLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
            
            tickid = newtickid;
            TopPane.add("Ticket Details", managerTicketPanel);
            TopPane.remove(managerRelatedTicketsPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_managerRelatedViewButtonActionPerformed

    private void RegisterButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_RegisterButtonActionPerformed
    {//GEN-HEADEREND:event_RegisterButtonActionPerformed
        String user, pass;
        user = UsernameTextField.getText();
        pass = PasswordTextField.getText();

        if (user.equals("") || pass.equals(""))
        {
            JOptionPane.showMessageDialog(new JFrame(), "Please enter a username and password.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            try
            {
                String url = "jdbc:mysql://localhost:3306/sys";
                String dbuser = "java";
                String dbpass = "javapass";
                con = DriverManager.getConnection(url, dbuser, dbpass);
                preparedStatement = con.prepareStatement("SELECT * FROM users WHERE username = ?");
                preparedStatement.setString(1, user);
                resultSet = preparedStatement.executeQuery();
                if (resultSet.next())
                {
                    System.out.println("Caught duplicate username: " + resultSet.getString("username"));
                    JOptionPane.showMessageDialog(new JFrame(), "This username is already taken. Please try another.", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else
                {
                    preparedStatement = con.prepareStatement
                    ("INSERT INTO users (idusers, username, password, role) VALUES (default, ?, ?, 0);");
                    preparedStatement.setString(1, user);
                    preparedStatement.setString(2, pass);
                    preparedStatement.executeUpdate();

                    JOptionPane.showMessageDialog(new JFrame(), "Registration successful! Please log in now.");
                }

            }
            catch (Exception e)
            {
                System.out.println(e);
            }
            finally {close(resultSet, preparedStatement, con);}
        }
    }//GEN-LAST:event_RegisterButtonActionPerformed

    private void LoginButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_LoginButtonActionPerformed
    {//GEN-HEADEREND:event_LoginButtonActionPerformed
        String user, pass;
        user = UsernameTextField.getText();
        pass = PasswordTextField.getText();
        int role = -1;

        if (user.equals("") || pass.equals(""))
        {
            JOptionPane.showMessageDialog(new JFrame(), "Please enter a username and password.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            try
            {
                String url = "jdbc:mysql://localhost:3306/sys";
                String dbuser = "java";
                String dbpass = "javapass";
                con = DriverManager.getConnection(url, dbuser, dbpass);
                preparedStatement = con.prepareStatement("SELECT * FROM users WHERE username = ?");
                preparedStatement.setString(1, user);
                resultSet = preparedStatement.executeQuery();
                
                Boolean auth = false;
                while (resultSet.next())
                {
                    if (resultSet.getString("password").equals(pass))
                    {
                        id = resultSet.getInt("idusers");
                        auth = true;
                        role = resultSet.getInt("role");

                        //Populate user-specific lists
                        preparedStatement = con.prepareStatement("SELECT * FROM tickets INNER JOIN assignments ON tickets.ticketid = assignments.assocticket WHERE assocuser = ?");
                        preparedStatement.setInt(1, resultSet.getInt("idusers"));
                        ResultSet ticketList = preparedStatement.executeQuery();
                        claimlist = new DefaultListModel();
                        String prioCode;
                        
                        while (ticketList.next())
                        {
                            /*Clients can't see the priority assigned to their tickets. Seeing that
                                you've been assigned Low priority would probably be angering.
                                Plus, they just don't need that information.*/
                            if (role != 0) switch (ticketList.getInt("priority"))
                                {
                                    case 1:
                                        prioCode = "[LOW] ";
                                        break;
                                    case 2:
                                        prioCode = "[HIGH] ";
                                        break;
                                    case 3:
                                        prioCode = "[CRIT] ";
                                        break;
                                    default:
                                        prioCode = "[MED] ";
                                }
                            else prioCode = "";
                            
                            switch (ticketList.getInt("status"))
                            {
                                case 0:
                                    claimlist.addElement(prioCode + "OPEN: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                                    break;
                                case 1:
                                    claimlist.addElement(prioCode + "WORKING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                                    break;
                                case 2:
                                    claimlist.addElement(prioCode + "WAITING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                                    break;
                                default:
                                    //Agents cannot see tickets that have been closed, to keep the workspace clear.
                                    if (role != 1)
                                        claimlist.addElement(prioCode + "CLOSED: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                            }
                        }
                        if (role != 0) claimlist = sort(claimlist);
                        else claimlist = clisort(claimlist);
                        ClientList.setModel(claimlist);
                        AgentClaimList.setModel(claimlist);
                        ManagerClaimList.setModel(claimlist);
                        if (role != 0)
                        {
                            statement = con.createStatement();
                            ticketList = statement.executeQuery("SELECT * FROM tickets WHERE assigned = 0");
                            genlist = new DefaultListModel();
                            while (ticketList.next())
                            {
                                switch (ticketList.getInt("priority"))
                                {
                                    case 1:
                                        prioCode = "[LOW] ";
                                        break;
                                    case 2:
                                        prioCode = "[HIGH] ";
                                        break;
                                    case 3:
                                        prioCode = "[CRIT] ";
                                        break;
                                    default:
                                        prioCode = "[MED] ";
                                }

                                switch (ticketList.getInt("status"))
                                {
                                    case 0:
                                        genlist.addElement(prioCode + "OPEN: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                                        break;
                                    case 1:
                                        genlist.addElement(prioCode + "WORKING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                                        break;
                                    case 2:
                                        genlist.addElement(prioCode + "WAITING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                                        break;
                                    default:
                                        //Agents cannot see tickets that have been closed, to keep the workspace clear.
                                        if (role != 1)
                                            genlist.addElement(prioCode + "CLOSED: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                                }
                            }
                            genlist = sort(genlist);
                            AgentGenList.setModel(genlist);
                            ManagerGenList.setModel(genlist);
                        }
                        //Create next view based on user's role
                        if (role == 0)
                        {
                            TopPane.removeTabAt(0);
                            TopPane.add("Landing", clientLandingPanel);
                        }
                        else if (role == 1)
                        {
                            TopPane.removeTabAt(0);
                            TopPane.add("Landing", agentLandingPanel);
                        }
                        else if (role == 2)
                        {
                            TopPane.removeTabAt(0);
                            TopPane.addTab("Landing", managerLandingPanel);
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(new JFrame(), "Something has gone wrong with your account data. Please contact an administrator for assistance.", "ERROR", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    }
                }
                if (!auth) JOptionPane.showMessageDialog(new JFrame(), "Invalid credentials.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            catch (Exception e)
            {
                System.out.println(e);
            }
            finally {close(resultSet, preparedStatement, con);}
        }
    }//GEN-LAST:event_LoginButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ExitButtonActionPerformed
    {//GEN-HEADEREND:event_ExitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void agentIdSearchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentIdSearchButtonActionPerformed
    {//GEN-HEADEREND:event_agentIdSearchButtonActionPerformed
        try {
            tickid = Integer.parseInt(JOptionPane.showInputDialog("Enter the ID of the ticket you would like to view."));
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            
            if (resultSet.next()) {
                if (resultSet.getInt("assigned") == 0) agentClaimTicketButton.setVisible(true);
                else agentClaimTicketButton.setVisible(false);
            
                agentTicketName.setText(" Name: " + resultSet.getString("ticketname"));
                agentDesc.setText(resultSet.getString("description"));
                switch (resultSet.getInt("status")) {
                    case 0:
                        agentTicketStatus.setText(" Status: Open");
                        break;
                    case 1:
                        agentTicketStatus.setText(" Status: In Progress");
                        break;
                    case 2:
                        agentTicketStatus.setText(" Status: Awaiting Client");
                        break;
                    default:
                        agentTicketStatus.setText(" Status: Closed");
                }
                switch (resultSet.getInt("priority")) {
                    case 1:
                        agentTicketPriority.setBackground(new Color(153,204,255));
                        agentTicketPriority.setText(" Priority: Low");
                        break;
                    case 2:
                        agentTicketPriority.setBackground(new Color(255,255,204));
                        agentTicketPriority.setText(" Priority: High");
                        break;
                    case 3:
                        agentTicketPriority.setBackground(new Color(255,153,153));
                        agentTicketPriority.setText(" Priority: Critical");
                        break;
                    default:
                        agentTicketPriority.setBackground(new Color(235,235,235));
                        agentTicketPriority.setText(" Priority: Medium");
                }
                switch (resultSet.getInt("timing")) {
                    case 0:
                        agentTimingLabel.setText("Timing: On Time  ");
                        break;
                    case 1:
                        agentTimingLabel.setText("Timing: At Risk  ");
                        break;
                    case 2:
                        agentTimingLabel.setText("Timing: Late  ");
                        break;
                    case 3:
                        agentTimingLabel.setText("Timing: Completed On Time  ");
                        break;
                    default:
                        agentTimingLabel.setText("Timing: Completed Late  ");
                }
                agentComments.setText(resultSet.getString("comments"));
                agentNotes.setText(resultSet.getString("notes"));
                agentTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
                agentLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
                
                TopPane.add("Ticket Details", agentTicketPanel);
                TopPane.remove(agentLandingPanel);
            }
            else {
                JOptionPane.showMessageDialog(new JFrame(), "Unable to find a ticket associated with that ID.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement,con);}
    }//GEN-LAST:event_agentIdSearchButtonActionPerformed

    private void managerIdSearchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerIdSearchButtonActionPerformed
    {//GEN-HEADEREND:event_managerIdSearchButtonActionPerformed
        try {
            tickid = Integer.parseInt(JOptionPane.showInputDialog("Enter the ID of the ticket you would like to view."));
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            
            if (resultSet.next()) {
                managerAssignTicketButton.setVisible(true);
            
                managerTicketName.setText(" Name: " + resultSet.getString("ticketname"));
                managerDesc.setText(resultSet.getString("description"));
                switch (resultSet.getInt("status")) {
                    case 0:
                        managerTicketStatus.setText(" Status: Open");
                        break;
                    case 1:
                        managerTicketStatus.setText(" Status: In Progress");
                        break;
                    case 2:
                        managerTicketStatus.setText(" Status: Awaiting Client");
                        break;
                    default:
                        managerTicketStatus.setText(" Status: Closed");
                }
                switch (resultSet.getInt("priority")) {
                    case 1:
                        managerTicketPriority.setBackground(new Color(153,204,255));
                        managerTicketPriority.setText(" Priority: Low");
                        break;
                    case 2:
                        managerTicketPriority.setBackground(new Color(255,255,204));
                        managerTicketPriority.setText(" Priority: High");
                        break;
                    case 3:
                        managerTicketPriority.setBackground(new Color(255,153,153));
                        managerTicketPriority.setText(" Priority: Critical");
                        break;
                    default:
                        managerTicketPriority.setBackground(new Color(235,235,235));
                        managerTicketPriority.setText(" Priority: Medium");
                }
                switch (resultSet.getInt("timing")) {
                    case 0:
                        managerTimingLabel.setText("Timing: On Time  ");
                        break;
                    case 1:
                        managerTimingLabel.setText("Timing: At Risk  ");
                        break;
                    case 2:
                        managerTimingLabel.setText("Timing: Late  ");
                        break;
                    case 3:
                        managerTimingLabel.setText("Timing: Completed On Time  ");
                        break;
                    default:
                        managerTimingLabel.setText("Timing: Completed Late  ");
                }
                managerComments.setText(resultSet.getString("comments"));
                managerNotes.setText(resultSet.getString("notes"));
                managerTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
                managerLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
                
                TopPane.add("Ticket Details", managerTicketPanel);
                TopPane.remove(managerLandingPanel);
            }
            else {
                JOptionPane.showMessageDialog(new JFrame(), "Unable to find a ticket associated with that ID.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement,con);}
    }//GEN-LAST:event_managerIdSearchButtonActionPerformed

    private void agentRelatedAddButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentRelatedAddButtonActionPerformed
    {//GEN-HEADEREND:event_agentRelatedAddButtonActionPerformed
        try {
            int relId = Integer.parseInt(JOptionPane.showInputDialog("Enter the ID of the ticket you would like to add here."));
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, relId);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            
            preparedStatement = con.prepareStatement("INSERT INTO relateds VALUES (?, ?, default)");
            preparedStatement.setInt(1, tickid);
            preparedStatement.setInt(2, relId);
            preparedStatement.executeUpdate();
            
            preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
            preparedStatement.setInt(1, id);
            preparedStatement.setString(2, "AGENT UPDATE RELATED ON TICKET "+tickid);
            preparedStatement.executeUpdate();
            
            DefaultListModel thisModel = (DefaultListModel) agentRelatedList.getModel();
            thisModel.addElement(resultSet.getInt("ticketid") + " " + resultSet.getString("ticketname"));
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_agentRelatedAddButtonActionPerformed

    private void managerRelatedAddButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerRelatedAddButtonActionPerformed
    {//GEN-HEADEREND:event_managerRelatedAddButtonActionPerformed
        try {
            int relId = Integer.parseInt(JOptionPane.showInputDialog("Enter the ID of the ticket you would like to add here."));
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, relId);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            
            preparedStatement = con.prepareStatement("INSERT INTO relateds VALUES (?, ?, default)");
            preparedStatement.setInt(1, tickid);
            preparedStatement.setInt(2, relId);
            preparedStatement.executeUpdate();
            
            preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
            preparedStatement.setInt(1, id);
            preparedStatement.setString(2, "MANAGER UPDATE RELATED ON TICKET "+tickid);
            preparedStatement.executeUpdate();
            
            DefaultListModel thisModel = (DefaultListModel) managerRelatedList.getModel();
            thisModel.addElement(resultSet.getInt("ticketid") + " " + resultSet.getString("ticketname"));
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_managerRelatedAddButtonActionPerformed

    private void managerViewAllButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerViewAllButtonActionPerformed
    {//GEN-HEADEREND:event_managerViewAllButtonActionPerformed
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            statement = con.createStatement();
            resultSet = statement.executeQuery("SELECT * FROM tickets;");
            DefaultListModel fullList = new DefaultListModel();
            String statuscombo;
            while (resultSet.next()) {
                switch (resultSet.getInt("priority")) {
                    case 1:
                        statuscombo = "[LOW] ";
                        break;
                    case 2:
                        statuscombo = "[HIGH] ";
                        break;
                    case 3:
                        statuscombo = "[CRIT] ";
                        break;
                    default:
                        statuscombo = "[MED] ";
                }
                switch (resultSet.getInt("status")) {
                    case 0:
                        statuscombo = statuscombo + "OPEN: ";
                        break;
                    case 1:
                        statuscombo = statuscombo + "WORKING: ";
                        break;
                    case 2:
                        statuscombo = statuscombo + "WAITING: ";
                        break;
                    default:
                        statuscombo = statuscombo + "CLOSED: ";
                }
                
                fullList.addElement(statuscombo + resultSet.getInt("ticketid") + " " + resultSet.getString("ticketname"));
            }
            managerViewAllList.setModel(fullList);
            TopPane.add("View All", managerViewAllPanel);
            TopPane.remove(managerLandingPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, statement, con);}
    }//GEN-LAST:event_managerViewAllButtonActionPerformed

    private void managerViewAllCancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerViewAllCancelButtonActionPerformed
    {//GEN-HEADEREND:event_managerViewAllCancelButtonActionPerformed
        TopPane.add("Landing", managerLandingPanel);
        TopPane.remove(managerViewAllPanel);
    }//GEN-LAST:event_managerViewAllCancelButtonActionPerformed

    private void managerViewAllViewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerViewAllViewButtonActionPerformed
    {//GEN-HEADEREND:event_managerViewAllViewButtonActionPerformed
        try {
            tickid = Integer.parseInt(managerViewAllList.getSelectedValue().split(" ")[2]);
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            
            managerTicketName.setText(" Name: " + resultSet.getString("ticketname"));
            managerDesc.setText(resultSet.getString("description"));
            switch (resultSet.getInt("status")) {
                case 0:
                    managerTicketStatus.setText(" Status: Open");
                    break;
                case 1:
                    managerTicketStatus.setText(" Status: In Progress");
                    break;
                case 2:
                    managerTicketStatus.setText(" Status: Awaiting Client");
                    break;
                default:
                    managerTicketStatus.setText(" Status: Closed");
            }
            switch (resultSet.getInt("priority")) {
                case 1:
                    managerTicketPriority.setBackground(new Color(153,204,255));
                    managerTicketPriority.setText(" Priority: Low");
                    break;
                case 2:
                    managerTicketPriority.setBackground(new Color(255,255,204));
                    managerTicketPriority.setText(" Priority: High");
                    break;
                case 3:
                    managerTicketPriority.setBackground(new Color(255,153,153));
                    managerTicketPriority.setText(" Priority: Critical");
                    break;
                default:
                    managerTicketPriority.setBackground(new Color(235,235,235));
                    managerTicketPriority.setText(" Priority: Medium");
            }
            switch (resultSet.getInt("timing")) {
                case 0:
                    managerTimingLabel.setText("Timing: On Time  ");
                    break;
                case 1:
                    managerTimingLabel.setText("Timing: At Risk  ");
                    break;
                case 2:
                    managerTimingLabel.setText("Timing: Late  ");
                    break;
                case 3:
                    managerTimingLabel.setText("Timing: Completed On Time  ");
                    break;
                default:
                    managerTimingLabel.setText("Timing: Completed Late  ");
            }
            managerComments.setText(resultSet.getString("comments"));
            managerNotes.setText(resultSet.getString("notes"));
            managerTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
            managerLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
            
            TopPane.add("Ticket Details", managerTicketPanel);
            TopPane.remove(managerViewAllPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {}
    }//GEN-LAST:event_managerViewAllViewButtonActionPerformed

    private void agentTimingChangeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentTimingChangeButtonActionPerformed
    {//GEN-HEADEREND:event_agentTimingChangeButtonActionPerformed
        try {
            String[] selVals = {"On Time", "At Risk", "Late", "Completed On Time", "Completed Late"};
            Object sel = JOptionPane.showInputDialog(new JFrame(), "What would you like to set the timing flag to?", "Change Timing", JOptionPane.QUESTION_MESSAGE, null, selVals, "On Time");
            
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            
            preparedStatement = con.prepareStatement("UPDATE tickets SET timing = ? WHERE ticketid = ?");
            preparedStatement.setInt(2, tickid);
            if (sel.equals("On Time")) {
                preparedStatement.setInt(1, 0);
                agentTimingLabel.setText("Timing: On Time  ");
                
                PreparedStatement preparedStatementTwo = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatementTwo.setInt(1, id);
                preparedStatementTwo.setString(2, "AGENT SET TIME 0 ON TICKET "+tickid);
                preparedStatementTwo.executeUpdate();
                preparedStatementTwo.executeUpdate();
            }
            else if (sel.equals("At Risk")) {
                preparedStatement.setInt(1, 1);
                agentTimingLabel.setText("Timing: At Risk  ");
                
                PreparedStatement preparedStatementTwo = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatementTwo.setInt(1, id);
                preparedStatementTwo.setString(2, "AGENT SET TIME 1 ON TICKET "+tickid);
                preparedStatementTwo.executeUpdate();
                preparedStatementTwo.close();
            }
            else if (sel.equals("Late")) {
                preparedStatement.setInt(1, 2);
                agentTimingLabel.setText("Timing: Late  ");
                
                PreparedStatement preparedStatementTwo = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatementTwo.setInt(1, id);
                preparedStatementTwo.setString(2, "AGENT SET TIME 2 ON TICKET "+tickid);
                preparedStatementTwo.executeUpdate();
                preparedStatementTwo.close();
            }
            else if (sel.equals("Completed On Time")) {
                preparedStatement.setInt(1, 3);
                agentTimingLabel.setText("Timing: Completed On Time  ");
                
                PreparedStatement preparedStatementTwo = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatementTwo.setInt(1, id);
                preparedStatementTwo.setString(2, "AGENT SET TIME 3 ON TICKET "+tickid);
                preparedStatementTwo.executeUpdate();
                preparedStatementTwo.close();
            }
            else {
                preparedStatement.setInt(1, 4);
                agentTimingLabel.setText("Timing: Completed Late  ");
                
                PreparedStatement preparedStatementTwo = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatementTwo.setInt(1, id);
                preparedStatementTwo.setString(2, "AGENT SET TIME 4 ON TICKET "+tickid);
                preparedStatementTwo.executeUpdate();
                preparedStatementTwo.close();
            }
            preparedStatement.executeUpdate();
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_agentTimingChangeButtonActionPerformed

    private void agentAgentSearchCheckButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentAgentSearchCheckButtonActionPerformed
    {//GEN-HEADEREND:event_agentAgentSearchCheckButtonActionPerformed
        try {
            int searchid = Integer.parseInt(agentAgentSearchBar.getText());
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM assignments INNER JOIN tickets ON assocticket = ticketid WHERE assocuser = ?");
            preparedStatement.setInt(1, searchid);
            resultSet = preparedStatement.executeQuery();
            
            DefaultListModel newlist = new DefaultListModel();
            String statuscode;
            while (resultSet.next()) {
                switch (resultSet.getInt("priority")) {
                    case 1:
                        statuscode = "[LOW] ";
                        break;
                    case 2:
                        statuscode = "[HIGH] ";
                        break;
                    case 3:
                        statuscode = "[CRIT] ";
                        break;
                    default:
                        statuscode = "[MED] ";
                }
                switch (resultSet.getInt("status")) {
                    case 0:
                        statuscode = statuscode + "OPEN: ";
                        break;
                    case 1:
                        statuscode = statuscode + "WORKING: ";
                        break;
                    case 2:
                        statuscode = statuscode + "WAITING: ";
                        break;
                    default:
                        statuscode = statuscode + "CLOSED: ";
                }
                newlist.addElement(statuscode + resultSet.getInt("ticketid") + " " + resultSet.getString("ticketname"));
            }
            agentAgentSearchList.setModel(newlist);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_agentAgentSearchCheckButtonActionPerformed

    private void agentAgentSearchViewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentAgentSearchViewButtonActionPerformed
    {//GEN-HEADEREND:event_agentAgentSearchViewButtonActionPerformed
        try {
            tickid = Integer.parseInt(agentAgentSearchList.getSelectedValue().split(" ")[2]);
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            
            agentTicketName.setText(" Name: " + resultSet.getString("ticketname"));
            agentDesc.setText(resultSet.getString("description"));
            switch (resultSet.getInt("status")) {
                case 0:
                    agentTicketStatus.setText(" Status: Open");
                    break;
                case 1:
                    agentTicketStatus.setText(" Status: In Progress");
                    break;
                case 2:
                    agentTicketStatus.setText(" Status: Awaiting Customer");
                    break;
                default:
                    agentTicketStatus.setText(" Status: Closed");
            }
            switch (resultSet.getInt("priority")) {
                case 1:
                    agentTicketPriority.setText(" Priority: Low");
                    agentTicketPriority.setBackground(new Color(153,204,255));
                    break;
                case 2:
                    agentTicketPriority.setText(" Priority: High");
                    agentTicketPriority.setBackground(new Color(255,255,204));
                    break;
                case 3:
                    agentTicketPriority.setText(" Priority: Critical");
                    agentTicketPriority.setBackground(new Color(255,153,153));
                    break;
                default:
                    agentTicketPriority.setText(" Priority: Medium");
                    agentTicketPriority.setBackground(new Color(235,235,235));
            }
            switch (resultSet.getInt("timing")) {
                case 0:
                    agentTimingLabel.setText("Timing: On Time  ");
                    break;
                case 1:
                    agentTimingLabel.setText("Timing: At Risk  ");
                    break;
                case 2:
                    agentTimingLabel.setText("Timing: Late  ");
                    break;
                case 3:
                    agentTimingLabel.setText("Timing: Completed On Time  ");
                    break;
                default:
                    agentTimingLabel.setText("Timing: Completed Late  ");
            }
            agentComments.setText(resultSet.getString("comments"));
            agentComments.setText(resultSet.getString("notes"));
            agentTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
            agentLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
            
            TopPane.add("Ticket Details", agentTicketPanel);
            TopPane.remove(agentAgentSearchPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet,preparedStatement,con);}
    }//GEN-LAST:event_agentAgentSearchViewButtonActionPerformed

    private void agentAgentSearchBackButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentAgentSearchBackButtonActionPerformed
    {//GEN-HEADEREND:event_agentAgentSearchBackButtonActionPerformed
        TopPane.add("Landing", agentLandingPanel);
        TopPane.remove(agentAgentSearchPanel);
    }//GEN-LAST:event_agentAgentSearchBackButtonActionPerformed

    private void managerAgentSearchCheckButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerAgentSearchCheckButtonActionPerformed
    {//GEN-HEADEREND:event_managerAgentSearchCheckButtonActionPerformed
        try {
            int searchid = Integer.parseInt(managerAgentSearchBar.getText());
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM assignments INNER JOIN tickets ON assocticket = ticketid WHERE assocuser = ?");
            preparedStatement.setInt(1, searchid);
            resultSet = preparedStatement.executeQuery();
            
            DefaultListModel newlist = new DefaultListModel();
            String statuscode;
            while (resultSet.next()) {
                switch (resultSet.getInt("priority")) {
                    case 1:
                        statuscode = "[LOW] ";
                        break;
                    case 2:
                        statuscode = "[HIGH] ";
                        break;
                    case 3:
                        statuscode = "[CRIT] ";
                        break;
                    default:
                        statuscode = "[MED] ";
                }
                switch (resultSet.getInt("status")) {
                    case 0:
                        statuscode = statuscode + "OPEN: ";
                        break;
                    case 1:
                        statuscode = statuscode + "WORKING: ";
                        break;
                    case 2:
                        statuscode = statuscode + "WAITING: ";
                        break;
                    default:
                        statuscode = statuscode + "CLOSED: ";
                }
                newlist.addElement(statuscode + resultSet.getInt("ticketid") + " " + resultSet.getString("ticketname"));
            }
            managerAgentSearchList.setModel(newlist);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_managerAgentSearchCheckButtonActionPerformed

    private void managerAgentSearchViewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerAgentSearchViewButtonActionPerformed
    {//GEN-HEADEREND:event_managerAgentSearchViewButtonActionPerformed
        try {
            tickid = Integer.parseInt(managerAgentSearchList.getSelectedValue().split(" ")[2]);
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            
            managerTicketName.setText(" Name: " + resultSet.getString("ticketname"));
            managerDesc.setText(resultSet.getString("description"));
            switch (resultSet.getInt("status")) {
                case 0:
                    managerTicketStatus.setText(" Status: Open");
                    break;
                case 1:
                    managerTicketStatus.setText(" Status: In Progress");
                    break;
                case 2:
                    managerTicketStatus.setText(" Status: Awaiting Customer");
                    break;
                default:
                    managerTicketStatus.setText(" Status: Closed");
            }
            switch (resultSet.getInt("priority")) {
                case 1:
                    managerTicketPriority.setText(" Priority: Low");
                    managerTicketPriority.setBackground(new Color(153,204,255));
                    break;
                case 2:
                    managerTicketPriority.setText(" Priority: High");
                    managerTicketPriority.setBackground(new Color(255,255,204));
                    break;
                case 3:
                    managerTicketPriority.setText(" Priority: Critical");
                    managerTicketPriority.setBackground(new Color(255,153,153));
                    break;
                default:
                    managerTicketPriority.setText(" Priority: Medium");
                    managerTicketPriority.setBackground(new Color(235,235,235));
            }
            switch (resultSet.getInt("timing")) {
                case 0:
                    managerTimingLabel.setText("Timing: On Time  ");
                    break;
                case 1:
                    managerTimingLabel.setText("Timing: At Risk  ");
                    break;
                case 2:
                    managerTimingLabel.setText("Timing: Late  ");
                    break;
                case 3:
                    managerTimingLabel.setText("Timing: Completed On Time  ");
                    break;
                default:
                    managerTimingLabel.setText("Timing: Completed Late  ");
            }
            managerComments.setText(resultSet.getString("comments"));
            managerComments.setText(resultSet.getString("notes"));
            managerTimestampLabel.setText(" First Posted: " + resultSet.getString("timestamp"));
            managerLastUpdateLabel.setText( "Last Update: " + resultSet.getString("lastchange"));
            
            TopPane.add("Ticket Details", managerTicketPanel);
            TopPane.remove(managerAgentSearchPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet,preparedStatement,con);}
    }//GEN-LAST:event_managerAgentSearchViewButtonActionPerformed

    private void managerAgentSearchBackButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerAgentSearchBackButtonActionPerformed
    {//GEN-HEADEREND:event_managerAgentSearchBackButtonActionPerformed
        TopPane.add("Landing", managerLandingPanel);
        TopPane.remove(managerAgentSearchPanel);
    }//GEN-LAST:event_managerAgentSearchBackButtonActionPerformed

    private void agentAgentSearchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_agentAgentSearchButtonActionPerformed
    {//GEN-HEADEREND:event_agentAgentSearchButtonActionPerformed
        TopPane.add("Agent Search", agentAgentSearchPanel);
        TopPane.remove(agentLandingPanel);
    }//GEN-LAST:event_agentAgentSearchButtonActionPerformed

    private void managerAgentSearchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerAgentSearchButtonActionPerformed
    {//GEN-HEADEREND:event_managerAgentSearchButtonActionPerformed
        TopPane.add("Agent Search", managerAgentSearchPanel);
        TopPane.remove(managerLandingPanel);
    }//GEN-LAST:event_managerAgentSearchButtonActionPerformed

    private void managerLogsBackButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerLogsBackButtonActionPerformed
    {//GEN-HEADEREND:event_managerLogsBackButtonActionPerformed
        TopPane.add("Landing", managerLandingPanel);
        TopPane.remove(managerLogsPanel);
    }//GEN-LAST:event_managerLogsBackButtonActionPerformed

    private void managerLogsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerLogsButtonActionPerformed
    {//GEN-HEADEREND:event_managerLogsButtonActionPerformed
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            statement = con.createStatement();
            resultSet = statement.executeQuery("SELECT * FROM logs");
            
            DefaultTableModel logTable = new DefaultTableModel();
            logTable.addColumn("Who");
            logTable.addColumn("What");
            logTable.addColumn("When");
            
            while (resultSet.next()) {
                Vector row = new Vector();
                row.add(resultSet.getInt("who"));
                row.add(resultSet.getString("what"));
                row.add(resultSet.getObject("when"));
                logTable.addRow(row);
            }
            managerLogsTable.setModel(logTable);
            
            TopPane.add("Logs", managerLogsPanel);
            TopPane.remove(managerLandingPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, statement, con);}
    }//GEN-LAST:event_managerLogsButtonActionPerformed

    private void managerTagListCancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerTagListCancelButtonActionPerformed
    {//GEN-HEADEREND:event_managerTagListCancelButtonActionPerformed
        TopPane.add("Ticket Details", managerTicketPanel);
        TopPane.remove(managerTagListPanel);
    }//GEN-LAST:event_managerTagListCancelButtonActionPerformed

    private void managerChangePriorityButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerChangePriorityButtonActionPerformed
    {//GEN-HEADEREND:event_managerChangePriorityButtonActionPerformed
        try
        {
            String[] selVals = {"Low", "Medium", "High", "Critical"};
            Object sel = JOptionPane.showInputDialog(new JFrame(), "What would you like to set the priority flag to?", "Change Priority", JOptionPane.QUESTION_MESSAGE, null, selVals, "Low");

            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);

            if (sel.equals("Low"))
            {
                preparedStatement = con.prepareStatement("UPDATE tickets SET priority = 1 WHERE ticketid = ?");
                preparedStatement.setInt(1, tickid);
                preparedStatement.executeUpdate();

                preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatement.setInt(1, id);
                preparedStatement.setString(2, "MANAGER SET LOW PRIORITY ON TICKET "+tickid);
                preparedStatement.executeUpdate();

                managerTicketPriority.setText(" Priority: Low");
                managerTicketPriority.setBackground(new Color(153,204,255));
            }
            else if (sel.equals("Medium"))
            {
                preparedStatement = con.prepareStatement("UPDATE tickets SET priority = 0 WHERE ticketid = ?");
                preparedStatement.setInt(1, tickid);
                preparedStatement.executeUpdate();

                preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatement.setInt(1, id);
                preparedStatement.setString(2, "MANAGER SET MEDIUM PRIORITY ON TICKET "+tickid);
                preparedStatement.executeUpdate();

                managerTicketPriority.setText(" Priority: Medium");
                managerTicketPriority.setBackground(new Color(235,235,235));
            }
            else if (sel.equals("High"))
            {
                preparedStatement = con.prepareStatement("UPDATE tickets SET priority = 2 WHERE ticketid = ?");
                preparedStatement.setInt(1, tickid);
                preparedStatement.executeUpdate();

                preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatement.setInt(1, id);
                preparedStatement.setString(2, "MANAGER SET HIGH PRIORITY ON TICKET "+tickid);
                preparedStatement.executeUpdate();

                managerTicketPriority.setText(" Priority: High");
                managerTicketPriority.setBackground(new Color(255,255,204));
            }
            else
            {
                preparedStatement = con.prepareStatement("UPDATE tickets SET priority = 3 WHERE ticketid = ?");
                preparedStatement.setInt(1, tickid);
                preparedStatement.executeUpdate();

                preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatement.setInt(1, id);
                preparedStatement.setString(2, "MANAGER SET CRITICAL PRIORITY ON TICKET "+tickid);
                preparedStatement.executeUpdate();

                managerTicketPriority.setText(" Priority: Critical");
                managerTicketPriority.setBackground(new Color(255,153,153));
            }

            //Remake the LIST.
            preparedStatement = con.prepareStatement("SELECT * FROM tickets INNER JOIN assignments ON tickets.ticketid = assignments.assocticket WHERE assocuser = ?");
            preparedStatement.setInt(1, id);
            ResultSet ticketList = preparedStatement.executeQuery();
            claimlist = new DefaultListModel();
            String prioCode;

            while (ticketList.next())
            {
                switch (ticketList.getInt("priority"))
                {
                    case 1:
                    prioCode = "[LOW] ";
                    break;
                    case 2:
                    prioCode = "[HIGH] ";
                    break;
                    case 3:
                    prioCode = "[CRIT] ";
                    break;
                    default:
                    prioCode = "[MED] ";
                }
                switch (ticketList.getInt("status"))
                {
                    case 0:
                    claimlist.addElement(prioCode + "OPEN: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                    break;
                    case 1:
                    claimlist.addElement(prioCode + "WORKING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                    break;
                    case 2:
                    claimlist.addElement(prioCode + "WAITING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                    break;
                    default:
                    claimlist.addElement(prioCode + "CLOSED: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                }
            }
            claimlist = sort(claimlist);
            ManagerClaimList.setModel(claimlist);

            statement = con.createStatement();
            ticketList = statement.executeQuery("SELECT * FROM tickets WHERE assigned = 0");
            genlist = new DefaultListModel();
            while (ticketList.next())
            {
                switch (ticketList.getInt("priority"))
                {
                    case 1:
                    prioCode = "[LOW] ";
                    break;
                    case 2:
                    prioCode = "[HIGH] ";
                    break;
                    case 3:
                    prioCode = "[CRIT] ";
                    break;
                    default:
                    prioCode = "[MED] ";
                }
                switch (ticketList.getInt("status"))
                {
                    case 0:
                    genlist.addElement(prioCode + "OPEN: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                    break;
                    case 1:
                    genlist.addElement(prioCode + "WORKING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                    break;
                    case 2:
                    genlist.addElement(prioCode + "WAITING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                    break;
                    default:
                    genlist.addElement(prioCode + "CLOSED: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                }
            }
            genlist = sort(genlist);
            ManagerGenList.setModel(genlist);
            statement.close();

        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_managerChangePriorityButtonActionPerformed

    private void managerTimingChangeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerTimingChangeButtonActionPerformed
    {//GEN-HEADEREND:event_managerTimingChangeButtonActionPerformed
        try
        {
            String[] selVals = {"On Time", "At Risk", "Late", "Completed On Time", "Completed Late"};
            Object sel = JOptionPane.showInputDialog(new JFrame(), "What would you like to set the timing flag to?", "Change Timing", JOptionPane.QUESTION_MESSAGE, null, selVals, "On Time");

            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);

            preparedStatement = con.prepareStatement("SELECT * FROM tickets WHERE ticketid = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();

            preparedStatement = con.prepareStatement("UPDATE tickets SET timing = ? WHERE ticketid = ?");
            preparedStatement.setInt(2, tickid);
            if (sel.equals("On Time"))
            {
                preparedStatement.setInt(1, 0);
                managerTimingLabel.setText("Timing: On Time  ");

                PreparedStatement preparedStatementTwo = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatementTwo.setInt(1, id);
                preparedStatementTwo.setString(2, "MANAGER SET TIME 0 ON TICKET "+tickid);
                preparedStatementTwo.executeUpdate();
                preparedStatementTwo.close();
            }
            else if (sel.equals("At Risk"))
            {
                preparedStatement.setInt(1, 1);
                managerTimingLabel.setText("Timing: At Risk  ");

                PreparedStatement preparedStatementTwo = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatementTwo.setInt(1, id);
                preparedStatementTwo.setString(2, "MANAGER SET TIME 1 ON TICKET "+tickid);
                preparedStatementTwo.executeUpdate();
                preparedStatementTwo.close();
            }
            else if (sel.equals("Late"))
            {
                preparedStatement.setInt(1, 2);
                managerTimingLabel.setText("Timing: Late  ");

                PreparedStatement preparedStatementTwo = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatementTwo.setInt(1, id);
                preparedStatementTwo.setString(2, "MANAGER SET TIME 2 ON TICKET "+tickid);
                preparedStatementTwo.executeUpdate();
                preparedStatementTwo.close();
            }
            else if (sel.equals("Completed On Time"))
            {
                preparedStatement.setInt(1, 3);
                managerTimingLabel.setText("Timing: Completed On Time  ");

                PreparedStatement preparedStatementTwo = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatementTwo.setInt(1, id);
                preparedStatementTwo.setString(2, "MANAGER SET TIME 3 ON TICKET "+tickid);
                preparedStatementTwo.executeUpdate();
                preparedStatementTwo.close();
            }
            else
            {
                preparedStatement.setInt(1, 4);
                managerTimingLabel.setText("Timing: Completed Late  ");

                PreparedStatement preparedStatementTwo = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatementTwo.setInt(1, id);
                preparedStatementTwo.setString(2, "MANAGER SET TIME 4 ON TICKET "+tickid);
                preparedStatementTwo.executeUpdate();
                preparedStatementTwo.close();
            }
            preparedStatement.executeUpdate();
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement, con);}
    }//GEN-LAST:event_managerTimingChangeButtonActionPerformed

    private void managerRelatedTicketsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerRelatedTicketsButtonActionPerformed
    {//GEN-HEADEREND:event_managerRelatedTicketsButtonActionPerformed
        try
        {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);

            preparedStatement = con.prepareStatement("SELECT * FROM relateds INNER JOIN tickets ON ticketid = relticket WHERE thisticket = ?");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();

            //Set list and label here
            managerRelatedLabel.setText("Related issues for ticket #: " + tickid);
            DefaultListModel ticklist = new DefaultListModel();
            while (resultSet.next())
            {
                ticklist.addElement(resultSet.getInt("ticketid") + " " + resultSet.getString("ticketname"));
            }
            managerRelatedList.setModel(ticklist);

            TopPane.add("Related Tickets", managerRelatedTicketsPanel);
            TopPane.remove(managerTicketPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, preparedStatement, con);}

    }//GEN-LAST:event_managerRelatedTicketsButtonActionPerformed

    private void managerTagListButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerTagListButtonActionPerformed
    {//GEN-HEADEREND:event_managerTagListButtonActionPerformed
        try
        {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);

            preparedStatement = con.prepareStatement("SELECT tags FROM tickets WHERE ticketid = ?;");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();

            String taglist = resultSet.getString("tags");
            managerTagListText.setText(taglist);
            managerTagListTitle.setText("Tags for ticket #: " + tickid);

            TopPane.addTab("Tags", managerTagListPanel);
            TopPane.remove(managerTicketPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, preparedStatement, con);}
    }//GEN-LAST:event_managerTagListButtonActionPerformed

    private void managerAssignTicketButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerAssignTicketButtonActionPerformed
    {//GEN-HEADEREND:event_managerAssignTicketButtonActionPerformed
        try
        {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);

            Object sel = JOptionPane.showInputDialog(new JFrame(), "Enter the ID you wish to associate with this ticket.");
            if (sel != null)
            {
                Object[] roleoptions = {"Client", "Agent", "Cancel"};
                int selrole = JOptionPane.showOptionDialog(new JFrame(), new JPanel(), "Is this association for a client or an agent?", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, roleoptions, null);
                if (selrole == JOptionPane.NO_OPTION)
                {
                    preparedStatement = con.prepareStatement
                    ("UPDATE tickets SET assigned = 1 WHERE ticketid = ?;");
                    preparedStatement.setInt(1, tickid);
                    preparedStatement.executeUpdate();
                    preparedStatement.close();
                }
                if (selrole != JOptionPane.CANCEL_OPTION)
                {
                    preparedStatement = con.prepareStatement("INSERT INTO assignments (assocuser, assocticket, delkey) VALUES (?, ?, default);");
                    preparedStatement.setInt(1, Integer.parseInt((String) sel));
                    preparedStatement.setInt(2, tickid);
                    preparedStatement.executeUpdate();
                    preparedStatement.close();

                    preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                    preparedStatement.setInt(1, id);
                    preparedStatement.setString(2, "MANAGER ASSIGN TICKET "+tickid+" TO "+Integer.parseInt((String)sel));
                    preparedStatement.executeUpdate();

                    //Populate user-specific lists
                    preparedStatement = con.prepareStatement("SELECT * FROM tickets INNER JOIN assignments ON tickets.ticketid = assignments.assocticket WHERE assocuser = ?");
                    preparedStatement.setInt(1, id);
                    ResultSet ticketList = preparedStatement.executeQuery();
                    DefaultListModel listModel = new DefaultListModel();
                    while (ticketList.next()) {
                        //priority tags
                        String priocode;
                        switch (ticketList.getInt("priority")) {
                            case 1:
                                priocode = "[LOW] ";
                                break;
                            case 2:
                                priocode = "[HIGH] ";
                                break;
                            case 3:
                                priocode = "[CRIT] ";
                                break;
                            default:
                                priocode = "[MEDIUM] ";
                        }
                        //status tags
                        switch (ticketList.getInt("status")) {
                            case 0:
                                listModel.addElement(priocode + "OPEN: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                                break;
                            case 1:
                                listModel.addElement(priocode + "WORKING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                                break;
                            case 2:
                                listModel.addElement(priocode + "WAITING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                                break;
                            default:
                                listModel.addElement(priocode + "CLOSED: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        }
                    }
                    listModel = sort(listModel);
                    ManagerClaimList.setModel(listModel);
                    statement = con.createStatement();
                    ticketList = statement.executeQuery("SELECT * FROM tickets WHERE assigned = 0");
                    listModel = new DefaultListModel();
                    while (ticketList.next()) {
                        //priority tags
                        String priocode;
                        switch (ticketList.getInt("priority")) {
                            case 1:
                                priocode = "[LOW] ";
                                break;
                            case 2:
                                priocode = "[HIGH] ";
                                break;
                            case 3:
                                priocode = "[CRIT] ";
                                break;
                            default:
                                priocode = "[MEDIUM] ";
                        }
                        //status tags
                        switch (ticketList.getInt("status")) {
                            case 0:
                                listModel.addElement(priocode + "OPEN: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                                break;
                            case 1:
                                listModel.addElement(priocode + "WORKING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                                break;
                            case 2:
                                listModel.addElement(priocode + "WAITING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                                break;
                            default:
                                listModel.addElement(priocode + "CLOSED: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                        }
                    }
                    listModel = sort(listModel);
                    ManagerGenList.setModel(listModel);
                }
            }
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, preparedStatement, con);}
    }//GEN-LAST:event_managerAssignTicketButtonActionPerformed

    private void managerAddNotesButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerAddNotesButtonActionPerformed
    {//GEN-HEADEREND:event_managerAddNotesButtonActionPerformed
        try
        {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);

            preparedStatement = con.prepareStatement("SELECT notes FROM tickets WHERE ticketid = ?;");
            preparedStatement.setInt(1, tickid);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            String ticknotes = resultSet.getString("notes");

            managerNotesText.setText(ticknotes);
            managerNotesTitle.setText("Tags for ticket #: " + tickid);

            TopPane.add("Notes", managerNotesPanel);
            TopPane.remove(managerTicketPanel);
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null, preparedStatement, con);}
    }//GEN-LAST:event_managerAddNotesButtonActionPerformed

    private void managerTicketReturnButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerTicketReturnButtonActionPerformed
    {//GEN-HEADEREND:event_managerTicketReturnButtonActionPerformed
        TopPane.add("Landing", managerLandingPanel);
        TopPane.remove(managerTicketPanel);
    }//GEN-LAST:event_managerTicketReturnButtonActionPerformed

    private void managerChstatTicketButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerChstatTicketButtonActionPerformed
    {//GEN-HEADEREND:event_managerChstatTicketButtonActionPerformed
        String[] selVals = {"Open", "Working", "Awaiting Client", "Closed"};
        Object sel = JOptionPane.showInputDialog(new JFrame(), "What would you like to set the status to?", "Change Status", JOptionPane.QUESTION_MESSAGE, null, selVals, "Open");

        try
        {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);

            preparedStatement = con.prepareStatement
            ("UPDATE tickets SET status = ? WHERE ticketid = ?;");
            preparedStatement.setInt(2, tickid);
            if (sel.equals("Open"))
            {
                preparedStatement.setInt(1, 0);
                managerTicketStatus.setText("Status: Open");
                preparedStatement.executeUpdate();

                preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatement.setInt(1, id);
                preparedStatement.setString(2, "MANAGER SET STATUS 0 ON TICKET "+tickid);
                preparedStatement.executeUpdate();
            }
            else if (sel.equals("Working"))
            {
                preparedStatement.setInt(1, 1);
                managerTicketStatus.setText("Status: Working");
                preparedStatement.executeUpdate();

                preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatement.setInt(1, id);
                preparedStatement.setString(2, "MANAGER SET STATUS 1 ON TICKET "+tickid);
                preparedStatement.executeUpdate();
            }
            else if (sel.equals("Awaiting Client"))
            {
                preparedStatement.setInt(1, 2);
                managerTicketStatus.setText("Status: Awaiting Client");
                preparedStatement.executeUpdate();

                preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatement.setInt(1, id);
                preparedStatement.setString(2, "MANAGER SET STATUS 2 ON TICKET "+tickid);
                preparedStatement.executeUpdate();
            }
            else if (sel.equals("Closed"))
            {
                preparedStatement.setInt(1, 3);
                managerTicketStatus.setText("Status: Closed");
                preparedStatement.executeUpdate();

                preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (?, ?, sysdate(), default)");
                preparedStatement.setInt(1, id);
                preparedStatement.setString(2, "MANAGER SET STATUS 3 ON TICKET "+tickid);
                preparedStatement.executeUpdate();
                
                String currentState = managerTimingLabel.getText().split(" ")[1];
                if (currentState.equals("Late")) {
                    managerTimingLabel.setText("Timing: Completed Late  ");
                    preparedStatement = con.prepareStatement("UPDATE tickets SET timing = 4 WHERE ticketid = ?");
                    preparedStatement.setInt(1, tickid);
                    preparedStatement.executeUpdate();
                }
                else if (currentState.equals("On") || currentState.equals("At")) {
                    managerTimingLabel.setText("Timing: Completed On Time  ");
                    preparedStatement = con.prepareStatement("UPDATE tickets SET timing = 3 WHERE ticketid = ?");
                    preparedStatement.setInt(1, tickid);
                    preparedStatement.executeUpdate();
                }
            }

            preparedStatement = con.prepareStatement("SELECT * FROM tickets INNER JOIN assignments ON tickets.ticketid = assignments.assocticket WHERE assocuser = ?");
            preparedStatement.setInt(1, id);
            ResultSet ticketList = preparedStatement.executeQuery();
            claimlist = new DefaultListModel();
            String prioCode;

            while (ticketList.next())
            {
                switch (ticketList.getInt("priority"))
                {
                    case 1:
                    prioCode = "[LOW] ";
                    break;
                    case 2:
                    prioCode = "[HIGH] ";
                    break;
                    case 3:
                    prioCode = "[CRIT] ";
                    break;
                    default:
                    prioCode = "[MED] ";
                }
                switch (ticketList.getInt("status"))
                {
                    case 0:
                    claimlist.addElement(prioCode + "OPEN: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                    break;
                    case 1:
                    claimlist.addElement(prioCode + "WORKING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                    break;
                    case 2:
                    claimlist.addElement(prioCode + "WAITING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                    break;
                    default:
                    claimlist.addElement(prioCode + "CLOSED: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                }
            }
            claimlist = sort(claimlist);
            ManagerClaimList.setModel(claimlist);

            statement = con.createStatement();
            ticketList = statement.executeQuery("SELECT * FROM tickets WHERE assigned = 0");
            genlist = new DefaultListModel();
            while (ticketList.next())
            {
                switch (ticketList.getInt("priority"))
                {
                    case 1:
                    prioCode = "[LOW] ";
                    break;
                    case 2:
                    prioCode = "[HIGH] ";
                    break;
                    case 3:
                    prioCode = "[CRIT] ";
                    break;
                    default:
                    prioCode = "[MED] ";
                }
                switch (ticketList.getInt("status"))
                {
                    case 0:
                    genlist.addElement(prioCode + "OPEN: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                    break;
                    case 1:
                    genlist.addElement(prioCode + "WORKING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                    break;
                    case 2:
                    genlist.addElement(prioCode + "WAITING: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                    break;
                    default:
                    genlist.addElement(prioCode + "CLOSED: " + ticketList.getInt("ticketid") + " " + ticketList.getString("ticketname"));
                }
            }
            genlist = sort(genlist);
            ManagerGenList.setModel(genlist);
            statement.close();
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(null,preparedStatement,con);}
    }//GEN-LAST:event_managerChstatTicketButtonActionPerformed

    private void managerAddCommentsButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_managerAddCommentsButtonActionPerformed
    {//GEN-HEADEREND:event_managerAddCommentsButtonActionPerformed
        String newcomm = JOptionPane.showInputDialog(new JFrame(), "Enter your comment here:");
        if (newcomm != null)
        {
            java.util.Date time = new java.util.Date(System.currentTimeMillis());
            newcomm = managerComments.getText() + "[" + new SimpleDateFormat("HH:mm:ss").format(time) + "] " + "M" + id + ": " + newcomm + "\n";

            try
            {
                String url = "jdbc:mysql://localhost:3306/sys";
                String dbuser = "java";
                String dbpass = "javapass";
                con = DriverManager.getConnection(url, dbuser, dbpass);

                preparedStatement = con.prepareStatement
                ("UPDATE tickets SET comments = ? WHERE ticketid = ?;");
                preparedStatement.setString(1, newcomm);
                preparedStatement.setInt(2, tickid);
                preparedStatement.executeUpdate();

                managerComments.setText(newcomm);
            }
            catch (Exception e) {System.out.println(e);}
            finally {close(null,preparedStatement,con);}
        }
    }//GEN-LAST:event_managerAddCommentsButtonActionPerformed

    private DefaultListModel sort(DefaultListModel unsorted) {
        try {
            DefaultListModel sorted = new DefaultListModel();
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            statement = con.createStatement();
            resultSet = statement.executeQuery("SELECT * FROM tickets");
            
            ArrayList<Integer> lookup = new ArrayList<Integer>();
            String status;
            
            for (int i = 0; i < unsorted.getSize(); i++) {
                status = unsorted.get(i).toString().split(" ")[1];
                
                if (status.equals("OPEN:")) {lookup.add(0);}
                else if (status.equals("WORKING:")) {lookup.add(1);}
                else if (status.equals("WAITING:")) {lookup.add(2);}
                else if (status.equals("CLOSED:")) {lookup.add(3);}
            }
            for (int i = 0; i < 4; i++) {
                for (int j = 0; j < unsorted.getSize(); j++) {
                    if (lookup.get(j) == i) {sorted.addElement(unsorted.get(j));}
                }
            }
            
            return sorted;
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, statement, null);}
        
        return null;
    }
    
    //Identical to above, but with different splitting to handle the lack of a status code.
    private DefaultListModel clisort(DefaultListModel unsorted) {
        try {
            DefaultListModel sorted = new DefaultListModel();
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            statement = con.createStatement();
            resultSet = statement.executeQuery("SELECT * FROM tickets");
            
            ArrayList<Integer> lookup = new ArrayList<Integer>();
            String status;
            
            for (int i = 0; i < unsorted.getSize(); i++) {
                status = unsorted.get(i).toString().split(" ")[0];
                
                if (status.equals("OPEN:")) {lookup.add(0);}
                else if (status.equals("WORKING:")) {lookup.add(1);}
                else if (status.equals("WAITING:")) {lookup.add(2);}
                else if (status.equals("CLOSED:")) {lookup.add(3);}
            }
            for (int i = 0; i < 4; i++) {
                for (int j = 0; j < unsorted.getSize(); j++) {
                    if (lookup.get(j) == i) {sorted.addElement(unsorted.get(j));}
                }
            }
            
            return sorted;
        }
        catch (Exception e) {System.out.println(e);}
        finally {close(resultSet, statement, null);}
        
        return null;
    }
    
    /*Under working circumstances, a lot of what's in here could probably be cronjobbed. 
        However, this isn't being actually used as anything more than a personal project, 
        so it's better to just make it perform cron checks at runtime.*/
    private void cron() {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String now = dtf.format(LocalDateTime.now());
        System.out.println(now);
        String[] nowdate = now.split("-");
        int nowyear = Integer.parseInt(nowdate[0]);
        int nowmonth = Integer.parseInt(nowdate[1]);
        int nowday = Integer.parseInt(nowdate[2]);
        int logyear, logmonth, logday;
        
        try {
            String url = "jdbc:mysql://localhost:3306/sys";
            String dbuser = "java";
            String dbpass = "javapass";
            con = DriverManager.getConnection(url, dbuser, dbpass);
            
            /*Ticket age check for 1 week. , make open tickets at risk after 5 days and late 
                after 7 days, awaiting-client tickets close at 7 days*/
            
            //1 week check.
            statement = con.createStatement();
            resultSet = statement.executeQuery("SELECT * FROM tickets");
            while (resultSet.next()) {
                String[] logdate = resultSet.getString("lastchange").split(" ");
                logdate = logdate[0].split("-");
                logyear = Integer.parseInt(logdate[0]);
                logmonth = Integer.parseInt(logdate[1]);
                logday = Integer.parseInt(logdate[2]);
                //check year rollover
                if (nowyear - logyear > 1 || 
                        (nowyear > logyear && 
                        (logmonth < 12 || nowmonth > 1 || (logday - nowday <= 26)))) {
                    if (logday - nowday <= 24) {
                        //Set late, or closed
                        if (resultSet.getInt("status") == 2) {
                            preparedStatement = con.prepareStatement("UPDATE tickets SET status = 3 WHERE ticketid = ?");
                            preparedStatement.setInt(1, resultSet.getInt("ticketid"));
                            preparedStatement.executeUpdate();
                            preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (0, ?, sysdate(), default)");
                            preparedStatement.setString(1, "TICKET " + resultSet.getInt("ticketid") + " EXPIRED WAITING ON CLIENT");
                            preparedStatement.executeUpdate();
                        }
                        else if (resultSet.getInt("status") < 2) {
                            preparedStatement = con.prepareStatement("UPDATE tickets SET timing = 2 WHERE ticketid = ?");
                            preparedStatement.setInt(1, resultSet.getInt("ticketid"));
                            preparedStatement.executeUpdate();
                        }
                    }
                    else {
                        //Set at risk
                        if (resultSet.getInt("status") < 2) {
                            preparedStatement = con.prepareStatement("UPDATE tickets SET timing = 1 WHERE ticketid = ?");
                            preparedStatement.setInt(1, resultSet.getInt("ticketid"));
                            preparedStatement.executeUpdate();
                        }
                    }
                }
                //check month rollover for late ticket
                else if (nowmonth - logmonth > 1 ||
                        (nowmonth > logmonth &&
                        ((logmonth == 2 && (logday - nowday <= 21))
                        || ((logmonth == 4 || logmonth == 6 || logmonth == 9 || logmonth == 11)
                            && (logday - nowday <= 23))
                        || (logday - nowday <= 24)))) {
                    if (resultSet.getInt("status") == 2) {
                        preparedStatement = con.prepareStatement("UPDATE tickets SET status = 3 WHERE ticketid = ?");
                        preparedStatement.setInt(1, resultSet.getInt("ticketid"));
                        preparedStatement.executeUpdate();
                        preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (0, ?, sysdate(), default)");
                        preparedStatement.setString(1, "TICKET " + resultSet.getInt("ticketid") + " EXPIRED WAITING ON CLIENT");
                        preparedStatement.executeUpdate();
                    }
                    else if (resultSet.getInt("status") < 2) {
                        preparedStatement = con.prepareStatement("UPDATE tickets SET timing = 2 WHERE ticketid = ?");
                        preparedStatement.setInt(1, resultSet.getInt("ticketid"));
                        preparedStatement.executeUpdate();
                    }
                }
                //check month rollover for at-risk ticket
                else if (nowmonth > logmonth &&
                        ((logmonth == 2 && logday - nowday <= 23)
                        || ((logmonth == 4 || logmonth == 6 || logmonth == 9 || logmonth == 11)
                            && logday - nowday <= 25)
                        || logday - nowday <= 26)) {
                    if (resultSet.getInt("status") < 2) {
                        preparedStatement = con.prepareStatement("UPDATE tickets SET timing = 1 WHERE ticketid = ?");
                        preparedStatement.setInt(1, resultSet.getInt("ticketid"));
                        preparedStatement.executeUpdate();
                    }
                }
                //week check
                else if (nowday - logday > 5) {
                    System.out.println("5828: cron fired for 5-day check");
                    if (nowday - logday > 7) {
                        System.out.println("5830: cron fired for week check");
                        if (resultSet.getInt("status") == 2) {
                            preparedStatement = con.prepareStatement("UPDATE tickets SET status = 3 WHERE ticketid = ?");
                            preparedStatement.setInt(1, resultSet.getInt("ticketid"));
                            preparedStatement.executeUpdate();
                            preparedStatement = con.prepareStatement("INSERT INTO logs VALUES (0, ?, sysdate(), default)");
                            preparedStatement.setString(1, "TICKET " + resultSet.getInt("ticketid") + " EXPIRED WAITING ON CLIENT");
                            preparedStatement.executeUpdate();
                        }
                        else if (resultSet.getInt("status") < 2) {
                            System.out.println("5840: cron fired for set late on ticket " + resultSet.getInt("ticketid"));
                            preparedStatement = con.prepareStatement("UPDATE tickets SET timing = 2 WHERE ticketid = ?");
                            preparedStatement.setInt(1, resultSet.getInt("ticketid"));
                            preparedStatement.executeUpdate();
                        }
                    }
                    else {
                        if (resultSet.getInt("status") < 2) {
                            preparedStatement = con.prepareStatement("UPDATE tickets SET timing = 1 WHERE ticketid = ?");
                            preparedStatement.setInt(1, resultSet.getInt("ticketid"));
                            preparedStatement.executeUpdate();
                        }
                    }
                }
            }
            
            //Discard logs after 1 month. 
            statement = con.createStatement();
            resultSet = statement.executeQuery("SELECT * FROM logs");
            while (resultSet.next()) {
                String[] logdate = resultSet.getString("when").split(" ");
                logdate = logdate[0].split("-");
                logyear = Integer.parseInt(logdate[0]);
                logmonth = Integer.parseInt(logdate[1]);
                logday = Integer.parseInt(logdate[2]);
                //check year rollover
                if (nowyear - logyear > 1 ||
                        (nowyear > logyear && 
                        (logmonth < 12 || nowmonth > 1 || (logday < nowday)))) {
                    preparedStatement = con.prepareStatement("DELETE FROM logs WHERE id = ?");
                    preparedStatement.setInt(1, resultSet.getInt("id"));
                    preparedStatement.executeUpdate();
                }
                //check month
                else if (nowmonth - logmonth > 1 || (nowmonth > logmonth && (logday < nowday))) {
                    preparedStatement = con.prepareStatement("DELETE FROM logs WHERE id = ?");
                    preparedStatement.setInt(1, resultSet.getInt("id"));
                    preparedStatement.executeUpdate();
                }
            }
        }
        catch (Exception e) {System.out.println(e);}
        finally {}
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {       
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
             * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
             */
            try
            {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
                {
                    if ("Nimbus".equals(info.getName()))
                    {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex)
            {
                java.util.logging.Logger.getLogger(HelpDeskUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex)
            {
                java.util.logging.Logger.getLogger(HelpDeskUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex)
            {
                java.util.logging.Logger.getLogger(HelpDeskUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex)
            {
                java.util.logging.Logger.getLogger(HelpDeskUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable()
            {
                public void run()
                {
                    new HelpDeskUI().setVisible(true);

                }
            });   
    }
    
    private void close(ResultSet resultSet, Statement statement, Connection con) {
        try {
            if (resultSet != null) {
                resultSet.close();
            }
            
            if (statement != null) {
                statement.close();
            }
            if (con != null) {
                con.close();
            }
        } 
        catch (Exception e) {}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> AgentClaimList;
    private javax.swing.JLabel AgentClaimListLabel;
    private javax.swing.JScrollPane AgentClaimListPanel;
    private javax.swing.JButton AgentClaimViewButton;
    private javax.swing.JButton AgentExitButton;
    private javax.swing.JList<String> AgentGenList;
    private javax.swing.JLabel AgentGenListLabel;
    private javax.swing.JScrollPane AgentGenListPanel;
    private javax.swing.JButton AgentGenViewButton;
    private javax.swing.JButton AgentNewTicketButton;
    private javax.swing.JButton AgentTicketCreateCancelButton;
    private javax.swing.JTextField AgentTicketCreateClient;
    private javax.swing.JLabel AgentTicketCreateClientLabel;
    private javax.swing.JTextArea AgentTicketCreateDesc;
    private javax.swing.JLabel AgentTicketCreateDescLabel;
    private javax.swing.JScrollPane AgentTicketCreateDescScroll;
    private javax.swing.JLabel AgentTicketCreateHeaderText;
    private javax.swing.JTextField AgentTicketCreateName;
    private javax.swing.JLabel AgentTicketCreateNameLabel;
    private javax.swing.JButton AgentTicketCreateSubmitButton;
    private javax.swing.JButton ClientExitButton;
    private javax.swing.JList<String> ClientList;
    private javax.swing.JScrollPane ClientListPanel;
    private javax.swing.JButton ClientNewTicketButton;
    private javax.swing.JButton ClientTicketCreateCancelButton;
    private javax.swing.JTextArea ClientTicketCreateDesc;
    private javax.swing.JLabel ClientTicketCreateDescLabel;
    private javax.swing.JScrollPane ClientTicketCreateDescScroll;
    private javax.swing.JLabel ClientTicketCreateHeaderText;
    private javax.swing.JTextField ClientTicketCreateName;
    private javax.swing.JLabel ClientTicketCreateNameLabel;
    private javax.swing.JButton ClientTicketCreateSubmitButton;
    private javax.swing.JLabel ClientTicketListLabel;
    private javax.swing.JButton ClientViewTicketButton;
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton LoginButton;
    private javax.swing.JPanel LoginPanel;
    private javax.swing.JList<String> ManagerClaimList;
    private javax.swing.JLabel ManagerClaimListLabel;
    private javax.swing.JScrollPane ManagerClaimListPanel;
    private javax.swing.JButton ManagerClaimViewButton;
    private javax.swing.JButton ManagerClientViewButton;
    private javax.swing.JButton ManagerExitButton;
    private javax.swing.JList<String> ManagerGenList;
    private javax.swing.JLabel ManagerGenListLabel;
    private javax.swing.JScrollPane ManagerGenListPanel;
    private javax.swing.JButton ManagerGenViewButton;
    private javax.swing.JButton ManagerNewTicketButton;
    private javax.swing.JButton ManagerTagSearchButton;
    private javax.swing.JButton ManagerTicketCreateCancelButton;
    private javax.swing.JTextField ManagerTicketCreateClient;
    private javax.swing.JLabel ManagerTicketCreateClientLabel;
    private javax.swing.JTextArea ManagerTicketCreateDesc;
    private javax.swing.JLabel ManagerTicketCreateDescLabel;
    private javax.swing.JScrollPane ManagerTicketCreateDescScroll;
    private javax.swing.JLabel ManagerTicketCreateHeaderText;
    private javax.swing.JTextField ManagerTicketCreateName;
    private javax.swing.JLabel ManagerTicketCreateNameLabel;
    private javax.swing.JButton ManagerTicketCreateSubmitButton;
    private javax.swing.JLabel PasswordLabel;
    private javax.swing.JPasswordField PasswordTextField;
    private javax.swing.JButton RegisterButton;
    private javax.swing.JTabbedPane TopPane;
    private javax.swing.JLabel UsernameLabel;
    private javax.swing.JTextField UsernameTextField;
    private javax.swing.JButton agentAddCommentsButton;
    private javax.swing.JButton agentAddNotesButton;
    private javax.swing.JButton agentAgentSearchBackButton;
    private javax.swing.JTextField agentAgentSearchBar;
    private javax.swing.JButton agentAgentSearchButton;
    private javax.swing.JButton agentAgentSearchCheckButton;
    private javax.swing.JLabel agentAgentSearchLabel;
    private javax.swing.JList<String> agentAgentSearchList;
    private javax.swing.JPanel agentAgentSearchPanel;
    private javax.swing.JScrollPane agentAgentSearchScrollPane;
    private javax.swing.JButton agentAgentSearchViewButton;
    private javax.swing.JButton agentChstatTicketButton;
    private javax.swing.JButton agentClaimTicketButton;
    private javax.swing.JScrollPane agentCommentScrollPane;
    private javax.swing.JTextArea agentComments;
    private javax.swing.JTextArea agentDesc;
    private javax.swing.JScrollPane agentDescScrollPane;
    private javax.swing.JButton agentIdSearchButton;
    private javax.swing.JLabel agentLandingColorLegend;
    private javax.swing.JPanel agentLandingPanel;
    private javax.swing.JLabel agentLastUpdateLabel;
    private javax.swing.JScrollPane agentNoteScrollPane;
    private javax.swing.JTextArea agentNotes;
    private javax.swing.JButton agentNotesCancelButton;
    private javax.swing.JPanel agentNotesPanel;
    private javax.swing.JButton agentNotesSaveButton;
    private javax.swing.JScrollPane agentNotesScrollPane;
    private javax.swing.JTextArea agentNotesText;
    private javax.swing.JLabel agentNotesTitle;
    private javax.swing.JButton agentRelatedAddButton;
    private javax.swing.JButton agentRelatedCancelButton;
    private javax.swing.JLabel agentRelatedLabel;
    private javax.swing.JList<String> agentRelatedList;
    private javax.swing.JScrollPane agentRelatedScrollPane;
    private javax.swing.JButton agentRelatedTicketsButton;
    private javax.swing.JPanel agentRelatedTicketsPanel;
    private javax.swing.JButton agentRelatedViewButton;
    private javax.swing.JButton agentTagListButton;
    private javax.swing.JButton agentTagListCancelButton;
    private javax.swing.JPanel agentTagListPanel;
    private javax.swing.JButton agentTagListSaveButton;
    private javax.swing.JScrollPane agentTagListScrollPane;
    private javax.swing.JTextArea agentTagListText;
    private javax.swing.JLabel agentTagListTitle;
    private javax.swing.JLabel agentTagListWarning;
    private javax.swing.JLabel agentTicketCommentLabel;
    private javax.swing.JPanel agentTicketCreatePanel;
    private javax.swing.JLabel agentTicketDescriptionLabel;
    private javax.swing.JLabel agentTicketName;
    private javax.swing.JLabel agentTicketNoteLabel;
    private javax.swing.JPanel agentTicketPanel;
    private javax.swing.JLabel agentTicketPriority;
    private javax.swing.JButton agentTicketReturnButton;
    private javax.swing.JLabel agentTicketStatus;
    private javax.swing.JLabel agentTimestampLabel;
    private javax.swing.JButton agentTimingChangeButton;
    private javax.swing.JLabel agentTimingLabel;
    private javax.swing.JButton clientAddCommentsButton;
    private javax.swing.JButton clientCloseTicketButton;
    private javax.swing.JScrollPane clientCommentScrollPane;
    private javax.swing.JTextArea clientComments;
    private javax.swing.JTextArea clientDesc;
    private javax.swing.JScrollPane clientDescScrollPane;
    private javax.swing.JPanel clientLandingPanel;
    private javax.swing.JLabel clientLastUpdateLabel;
    private javax.swing.JButton clientRelatedCancelButton;
    private javax.swing.JLabel clientRelatedLabel;
    private javax.swing.JList<String> clientRelatedList;
    private javax.swing.JScrollPane clientRelatedScrollPane;
    private javax.swing.JButton clientRelatedTicketsButton;
    private javax.swing.JPanel clientRelatedTicketsPanel;
    private javax.swing.JButton clientRelatedViewButton;
    private javax.swing.JLabel clientTicketCommentLabel;
    private javax.swing.JPanel clientTicketCreatePanel;
    private javax.swing.JLabel clientTicketDescriptionLabel;
    private javax.swing.JLabel clientTicketName;
    private javax.swing.JPanel clientTicketPanel;
    private javax.swing.JButton clientTicketReturnButton;
    private javax.swing.JLabel clientTicketStatus;
    private javax.swing.JLabel clientTimestampLabel;
    private javax.swing.JButton managerAddCommentsButton;
    private javax.swing.JButton managerAddNotesButton;
    private javax.swing.JButton managerAgentSearchBackButton;
    private javax.swing.JTextField managerAgentSearchBar;
    private javax.swing.JButton managerAgentSearchButton;
    private javax.swing.JButton managerAgentSearchCheckButton;
    private javax.swing.JLabel managerAgentSearchLabel;
    private javax.swing.JList<String> managerAgentSearchList;
    private javax.swing.JPanel managerAgentSearchPanel;
    private javax.swing.JScrollPane managerAgentSearchScrollPane;
    private javax.swing.JButton managerAgentSearchViewButton;
    private javax.swing.JButton managerAssignTicketButton;
    private javax.swing.JButton managerChangePriorityButton;
    private javax.swing.JButton managerChstatTicketButton;
    private javax.swing.JScrollPane managerCommentScrollPane;
    private javax.swing.JTextArea managerComments;
    private javax.swing.JTextArea managerDesc;
    private javax.swing.JScrollPane managerDescScrollPane;
    private javax.swing.JButton managerIdSearchButton;
    private javax.swing.JLabel managerLandingColorLegend;
    private javax.swing.JLabel managerLandingColorLegend1;
    private javax.swing.JPanel managerLandingPanel;
    private javax.swing.JLabel managerLastUpdateLabel;
    private javax.swing.JButton managerLogsBackButton;
    private javax.swing.JButton managerLogsButton;
    private javax.swing.JPanel managerLogsPanel;
    private javax.swing.JScrollPane managerLogsScrollPane;
    private javax.swing.JTable managerLogsTable;
    private javax.swing.JScrollPane managerNoteScrollPane;
    private javax.swing.JTextArea managerNotes;
    private javax.swing.JButton managerNotesCancelButton;
    private javax.swing.JPanel managerNotesPanel;
    private javax.swing.JButton managerNotesSaveButton;
    private javax.swing.JScrollPane managerNotesScrollPane;
    private javax.swing.JTextArea managerNotesText;
    private javax.swing.JLabel managerNotesTitle;
    private javax.swing.JButton managerRelatedAddButton;
    private javax.swing.JButton managerRelatedCancelButton;
    private javax.swing.JLabel managerRelatedLabel;
    private javax.swing.JList<String> managerRelatedList;
    private javax.swing.JScrollPane managerRelatedScrollPane;
    private javax.swing.JButton managerRelatedTicketsButton;
    private javax.swing.JPanel managerRelatedTicketsPanel;
    private javax.swing.JButton managerRelatedViewButton;
    private javax.swing.JButton managerTagListButton;
    private javax.swing.JButton managerTagListCancelButton;
    private javax.swing.JPanel managerTagListPanel;
    private javax.swing.JButton managerTagListSaveButton;
    private javax.swing.JScrollPane managerTagListScrollPane;
    private javax.swing.JTextArea managerTagListText;
    private javax.swing.JLabel managerTagListTitle;
    private javax.swing.JLabel managerTagListWarning;
    private javax.swing.JLabel managerTicketCommentLabel;
    private javax.swing.JPanel managerTicketCreatePanel;
    private javax.swing.JLabel managerTicketDescriptionLabel;
    private javax.swing.JLabel managerTicketName;
    private javax.swing.JLabel managerTicketNoteLabel;
    private javax.swing.JPanel managerTicketPanel;
    private javax.swing.JLabel managerTicketPriority;
    private javax.swing.JButton managerTicketReturnButton;
    private javax.swing.JLabel managerTicketStatus;
    private javax.swing.JLabel managerTimestampLabel;
    private javax.swing.JButton managerTimingChangeButton;
    private javax.swing.JLabel managerTimingLabel;
    private javax.swing.JButton managerViewAllButton;
    private javax.swing.JButton managerViewAllCancelButton;
    private javax.swing.JLabel managerViewAllLabel;
    private javax.swing.JList<String> managerViewAllList;
    private javax.swing.JPanel managerViewAllPanel;
    private javax.swing.JScrollPane managerViewAllScrollPane;
    private javax.swing.JButton managerViewAllViewButton;
    private javax.swing.JButton tagSearchBackButton;
    private javax.swing.JTextField tagSearchBar;
    private javax.swing.JButton tagSearchButton;
    private javax.swing.JLabel tagSearchLabel;
    private javax.swing.JList<String> tagSearchList;
    private javax.swing.JPanel tagSearchPanel;
    private javax.swing.JScrollPane tagSearchScrollPane;
    private javax.swing.JButton tagSearchViewButton;
    // End of variables declaration//GEN-END:variables
}
